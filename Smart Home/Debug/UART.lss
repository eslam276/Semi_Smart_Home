
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003456  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00003456  000034ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  008000f8  008000f8  00003582  2**0
                  ALLOC
  3 .stab         00003630  00000000  00000000  00003584  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000151e  00000000  00000000  00006bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000080d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008212  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008382  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aeb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bc64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bdc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c051  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c81f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__vector_1>
       8:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__vector_2>
       c:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 32       	cpi	r26, 0x22	; 34
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ae 12 	call	0x255c	; 0x255c <main>
      8a:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ed       	ldi	r26, 0xD8	; 216
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ed       	ldi	r24, 0xD8	; 216
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
#include "ADC_reg.h"
#include "ADC_cfg.h"


void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
        CLR_BIT(ADMUX,ADMUX_REFS1);

    #elif ADC_u8REF_VOLT == AVCC_REF


        SET_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
        CLR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24

    /* Set ADC Left Adjust Result */

    #if ADC_u8RESOLUTION == EIGHT_BITS

         SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24

         SET_BIT(ADCSRA,ADCSRA_ADATE);

    #elif ADC_u8AUTO_TRIGGER == DISABLE

         CLR_BIT(ADCSRA,ADCSRA_ADATE);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24

         SET_BIT(ADCSRA,ADCSRA_ADIE);

    #elif ADC_u8INT_ENABLE == DISABLE

         CLR_BIT(ADCSRA,ADCSRA_ADIE);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	8c 93       	st	X, r24


    /* Configure ADC prescaler bits */


    ADCSRA &= PRESCALER_MASK ;
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	88 7f       	andi	r24, 0xF8	; 248
     ba0:	8c 93       	st	X, r24
    ADCSRA |= ADC_u8PRESCALER_VAL ;
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	87 60       	ori	r24, 0x07	; 7
     bae:	8c 93       	st	X, r24



    /* ADC Enable */

    SET_BIT(ADCSRA,ADCSRA_ADEN); 
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24





}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_u8GetChannelReading>:



uint16 ADC_u8GetChannelReading(uint8 Copy_u8Channel)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01

    ADMUX &= CHANNEL_MASK;
     bd0:	a7 e2       	ldi	r26, 0x27	; 39
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e7 e2       	ldi	r30, 0x27	; 39
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	80 7e       	andi	r24, 0xE0	; 224
     bdc:	8c 93       	st	X, r24
    ADMUX |= Copy_u8Channel ;
     bde:	a7 e2       	ldi	r26, 0x27	; 39
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e7 e2       	ldi	r30, 0x27	; 39
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	90 81       	ld	r25, Z
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	89 2b       	or	r24, r25
     bec:	8c 93       	st	X, r24



    /* Start Conversion */

    SET_BIT(ADCSRA,ADCSRA_ADSC);
     bee:	a6 e2       	ldi	r26, 0x26	; 38
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e6 e2       	ldi	r30, 0x26	; 38
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	80 64       	ori	r24, 0x40	; 64
     bfa:	8c 93       	st	X, r24



    /* Reading the flag */

    while (GET_BIT(ADCSRA,ADCSRA_ADIF)== 0)
     bfc:	e6 e2       	ldi	r30, 0x26	; 38
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	82 95       	swap	r24
     c04:	8f 70       	andi	r24, 0x0F	; 15
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	81 70       	andi	r24, 0x01	; 1
     c0c:	90 70       	andi	r25, 0x00	; 0
     c0e:	00 97       	sbiw	r24, 0x00	; 0
     c10:	a9 f3       	breq	.-22     	; 0xbfc <ADC_u8GetChannelReading+0x38>
    {
        /* code */
    }

    /* clear the conversion complete flag */
    SET_BIT(ADCSRA,ADCSRA_ADIF);
     c12:	a6 e2       	ldi	r26, 0x26	; 38
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e6 e2       	ldi	r30, 0x26	; 38
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	80 61       	ori	r24, 0x10	; 16
     c1e:	8c 93       	st	X, r24


    #if ADC_u8RESOLUTION == EIGHT_BITS

        return ADCH ;
     c20:	e5 e2       	ldi	r30, 0x25	; 37
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	88 2f       	mov	r24, r24
     c28:	90 e0       	ldi	r25, 0x00	; 0

        #error Wrong ADC_u8RESOLUTION confegration option 

    #endif

}
     c2a:	0f 90       	pop	r0
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <voidSendEnablePulse>:
#include "CLCD_interface.h"
#include "CLCD_prv.h"
#include "CLCD_cfg.h"

static void voidSendEnablePulse(void)
{
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	2e 97       	sbiw	r28, 0x0e	; 14
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	62 e0       	ldi	r22, 0x02	; 2
     c4a:	41 e0       	ldi	r20, 0x01	; 1
     c4c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <DIO_u8SetPinValue>
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e4       	ldi	r27, 0x40	; 64
     c58:	8b 87       	std	Y+11, r24	; 0x0b
     c5a:	9c 87       	std	Y+12, r25	; 0x0c
     c5c:	ad 87       	std	Y+13, r26	; 0x0d
     c5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c60:	6b 85       	ldd	r22, Y+11	; 0x0b
     c62:	7c 85       	ldd	r23, Y+12	; 0x0c
     c64:	8d 85       	ldd	r24, Y+13	; 0x0d
     c66:	9e 85       	ldd	r25, Y+14	; 0x0e
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	4a e7       	ldi	r20, 0x7A	; 122
     c6e:	55 e4       	ldi	r21, 0x45	; 69
     c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	8f 83       	std	Y+7, r24	; 0x07
     c7a:	98 87       	std	Y+8, r25	; 0x08
     c7c:	a9 87       	std	Y+9, r26	; 0x09
     c7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c80:	6f 81       	ldd	r22, Y+7	; 0x07
     c82:	78 85       	ldd	r23, Y+8	; 0x08
     c84:	89 85       	ldd	r24, Y+9	; 0x09
     c86:	9a 85       	ldd	r25, Y+10	; 0x0a
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e8       	ldi	r20, 0x80	; 128
     c8e:	5f e3       	ldi	r21, 0x3F	; 63
     c90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c94:	88 23       	and	r24, r24
     c96:	2c f4       	brge	.+10     	; 0xca2 <voidSendEnablePulse+0x70>
		__ticks = 1;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	9e 83       	std	Y+6, r25	; 0x06
     c9e:	8d 83       	std	Y+5, r24	; 0x05
     ca0:	3f c0       	rjmp	.+126    	; 0xd20 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     ca2:	6f 81       	ldd	r22, Y+7	; 0x07
     ca4:	78 85       	ldd	r23, Y+8	; 0x08
     ca6:	89 85       	ldd	r24, Y+9	; 0x09
     ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	3f ef       	ldi	r19, 0xFF	; 255
     cae:	4f e7       	ldi	r20, 0x7F	; 127
     cb0:	57 e4       	ldi	r21, 0x47	; 71
     cb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cb6:	18 16       	cp	r1, r24
     cb8:	4c f5       	brge	.+82     	; 0xd0c <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cba:	6b 85       	ldd	r22, Y+11	; 0x0b
     cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
     cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	40 e2       	ldi	r20, 0x20	; 32
     cc8:	51 e4       	ldi	r21, 0x41	; 65
     cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	bc 01       	movw	r22, r24
     cd4:	cd 01       	movw	r24, r26
     cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	9e 83       	std	Y+6, r25	; 0x06
     ce0:	8d 83       	std	Y+5, r24	; 0x05
     ce2:	0f c0       	rjmp	.+30     	; 0xd02 <voidSendEnablePulse+0xd0>
     ce4:	80 e9       	ldi	r24, 0x90	; 144
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	9c 83       	std	Y+4, r25	; 0x04
     cea:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <voidSendEnablePulse+0xbe>
     cf4:	9c 83       	std	Y+4, r25	; 0x04
     cf6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cf8:	8d 81       	ldd	r24, Y+5	; 0x05
     cfa:	9e 81       	ldd	r25, Y+6	; 0x06
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	9e 83       	std	Y+6, r25	; 0x06
     d00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d02:	8d 81       	ldd	r24, Y+5	; 0x05
     d04:	9e 81       	ldd	r25, Y+6	; 0x06
     d06:	00 97       	sbiw	r24, 0x00	; 0
     d08:	69 f7       	brne	.-38     	; 0xce4 <voidSendEnablePulse+0xb2>
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0c:	6f 81       	ldd	r22, Y+7	; 0x07
     d0e:	78 85       	ldd	r23, Y+8	; 0x08
     d10:	89 85       	ldd	r24, Y+9	; 0x09
     d12:	9a 85       	ldd	r25, Y+10	; 0x0a
     d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	9e 83       	std	Y+6, r25	; 0x06
     d1e:	8d 83       	std	Y+5, r24	; 0x05
     d20:	8d 81       	ldd	r24, Y+5	; 0x05
     d22:	9e 81       	ldd	r25, Y+6	; 0x06
     d24:	9a 83       	std	Y+2, r25	; 0x02
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <voidSendEnablePulse+0xfa>
     d30:	9a 83       	std	Y+2, r25	; 0x02
     d32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	62 e0       	ldi	r22, 0x02	; 2
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <DIO_u8SetPinValue>
}
     d3e:	2e 96       	adiw	r28, 0x0e	; 14
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN,GET_BIT(Copy_u8Nipple,0));
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	98 2f       	mov	r25, r24
     d60:	91 70       	andi	r25, 0x01	; 1
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	63 e0       	ldi	r22, 0x03	; 3
     d66:	49 2f       	mov	r20, r25
     d68:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN,GET_BIT(Copy_u8Nipple,1));
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	86 95       	lsr	r24
     d70:	98 2f       	mov	r25, r24
     d72:	91 70       	andi	r25, 0x01	; 1
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	64 e0       	ldi	r22, 0x04	; 4
     d78:	49 2f       	mov	r20, r25
     d7a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN,GET_BIT(Copy_u8Nipple,2));
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	86 95       	lsr	r24
     d82:	86 95       	lsr	r24
     d84:	98 2f       	mov	r25, r24
     d86:	91 70       	andi	r25, 0x01	; 1
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	65 e0       	ldi	r22, 0x05	; 5
     d8c:	49 2f       	mov	r20, r25
     d8e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN,GET_BIT(Copy_u8Nipple,3));
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	86 95       	lsr	r24
     d96:	86 95       	lsr	r24
     d98:	86 95       	lsr	r24
     d9a:	98 2f       	mov	r25, r24
     d9c:	91 70       	andi	r25, 0x01	; 1
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	66 e0       	ldi	r22, 0x06	; 6
     da2:	49 2f       	mov	r20, r25
     da4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <DIO_u8SetPinValue>
}
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	0f 92       	push	r0
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Cmd>>4);	/*send the most 4 bits to the LCD*/
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	82 95       	swap	r24
     dca:	8f 70       	andi	r24, 0x0F	; 15
     dcc:	0e 94 a8 06 	call	0xd50	; 0xd50 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     dd0:	0e 94 19 06 	call	0xc32	; 0xc32 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Cmd);		/*send the least 4 bits to the LCD*/
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	0e 94 a8 06 	call	0xd50	; 0xd50 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     dda:	0e 94 19 06 	call	0xc32	; 0xc32 <voidSendEnablePulse>
#endif
}
     dde:	0f 90       	pop	r0
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data)
{
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	0f 92       	push	r0
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to high for Data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	41 e0       	ldi	r20, 0x01	; 1
     df8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Data>>4);	/*send the most 4 bits to the LCD*/
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	82 95       	swap	r24
     e00:	8f 70       	andi	r24, 0x0F	; 15
     e02:	0e 94 a8 06 	call	0xd50	; 0xd50 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e06:	0e 94 19 06 	call	0xc32	; 0xc32 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);	/*send the least 4 bits to the LCD*/
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	0e 94 a8 06 	call	0xd50	; 0xd50 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e10:	0e 94 19 06 	call	0xc32	; 0xc32 <voidSendEnablePulse>
#endif

}
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	2e 97       	sbiw	r28, 0x0e	; 14
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	a0 e2       	ldi	r26, 0x20	; 32
     e36:	b2 e4       	ldi	r27, 0x42	; 66
     e38:	8b 87       	std	Y+11, r24	; 0x0b
     e3a:	9c 87       	std	Y+12, r25	; 0x0c
     e3c:	ad 87       	std	Y+13, r26	; 0x0d
     e3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e40:	6b 85       	ldd	r22, Y+11	; 0x0b
     e42:	7c 85       	ldd	r23, Y+12	; 0x0c
     e44:	8d 85       	ldd	r24, Y+13	; 0x0d
     e46:	9e 85       	ldd	r25, Y+14	; 0x0e
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	4a e7       	ldi	r20, 0x7A	; 122
     e4e:	55 e4       	ldi	r21, 0x45	; 69
     e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	8f 83       	std	Y+7, r24	; 0x07
     e5a:	98 87       	std	Y+8, r25	; 0x08
     e5c:	a9 87       	std	Y+9, r26	; 0x09
     e5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e60:	6f 81       	ldd	r22, Y+7	; 0x07
     e62:	78 85       	ldd	r23, Y+8	; 0x08
     e64:	89 85       	ldd	r24, Y+9	; 0x09
     e66:	9a 85       	ldd	r25, Y+10	; 0x0a
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e8       	ldi	r20, 0x80	; 128
     e6e:	5f e3       	ldi	r21, 0x3F	; 63
     e70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e74:	88 23       	and	r24, r24
     e76:	2c f4       	brge	.+10     	; 0xe82 <CLCD_voidInit+0x66>
		__ticks = 1;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	9e 83       	std	Y+6, r25	; 0x06
     e7e:	8d 83       	std	Y+5, r24	; 0x05
     e80:	3f c0       	rjmp	.+126    	; 0xf00 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e82:	6f 81       	ldd	r22, Y+7	; 0x07
     e84:	78 85       	ldd	r23, Y+8	; 0x08
     e86:	89 85       	ldd	r24, Y+9	; 0x09
     e88:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	3f ef       	ldi	r19, 0xFF	; 255
     e8e:	4f e7       	ldi	r20, 0x7F	; 127
     e90:	57 e4       	ldi	r21, 0x47	; 71
     e92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e96:	18 16       	cp	r1, r24
     e98:	4c f5       	brge	.+82     	; 0xeec <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e2       	ldi	r20, 0x20	; 32
     ea8:	51 e4       	ldi	r21, 0x41	; 65
     eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	bc 01       	movw	r22, r24
     eb4:	cd 01       	movw	r24, r26
     eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	9e 83       	std	Y+6, r25	; 0x06
     ec0:	8d 83       	std	Y+5, r24	; 0x05
     ec2:	0f c0       	rjmp	.+30     	; 0xee2 <CLCD_voidInit+0xc6>
     ec4:	80 e9       	ldi	r24, 0x90	; 144
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	9c 83       	std	Y+4, r25	; 0x04
     eca:	8b 83       	std	Y+3, r24	; 0x03
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	9c 81       	ldd	r25, Y+4	; 0x04
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <CLCD_voidInit+0xb4>
     ed4:	9c 83       	std	Y+4, r25	; 0x04
     ed6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed8:	8d 81       	ldd	r24, Y+5	; 0x05
     eda:	9e 81       	ldd	r25, Y+6	; 0x06
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	9e 83       	std	Y+6, r25	; 0x06
     ee0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05
     ee4:	9e 81       	ldd	r25, Y+6	; 0x06
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	69 f7       	brne	.-38     	; 0xec4 <CLCD_voidInit+0xa8>
     eea:	14 c0       	rjmp	.+40     	; 0xf14 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	9e 83       	std	Y+6, r25	; 0x06
     efe:	8d 83       	std	Y+5, r24	; 0x05
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	9e 81       	ldd	r25, Y+6	; 0x06
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <CLCD_voidInit+0xf0>
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, 5*7 font size*/
#if CLCD_OP_MODE == EIGHT_BIT_MODE
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	0e 94 a8 06 	call	0xd50	; 0xd50 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     f1a:	0e 94 19 06 	call	0xc32	; 0xc32 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	0e 94 a8 06 	call	0xd50	; 0xd50 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     f24:	0e 94 19 06 	call	0xc32	; 0xc32 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	0e 94 a8 06 	call	0xd50	; 0xd50 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     f2e:	0e 94 19 06 	call	0xc32	; 0xc32 <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
     f32:	8c e0       	ldi	r24, 0x0C	; 12
     f34:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <CLCD_voidSendCmd>

	/*Display clear*/
	CLCD_voidSendCmd(1);
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <CLCD_voidSendCmd>
}
     f3e:	2e 96       	adiw	r28, 0x0e	; 14
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char* Copy_chString)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <CLCD_u8SendString+0x6>
     f56:	00 d0       	rcall	.+0      	; 0xf58 <CLCD_u8SendString+0x8>
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	9c 83       	std	Y+4, r25	; 0x04
     f5e:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState= OK;
     f60:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chString != NULL)
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	e1 f0       	breq	.+56     	; 0xfa2 <CLCD_u8SendString+0x52>
	{
		uint8 Local_u8Counter=0u;
     f6a:	19 82       	std	Y+1, r1	; 0x01
     f6c:	0e c0       	rjmp	.+28     	; 0xf8a <CLCD_u8SendString+0x3a>
		while(Copy_chString[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_chString[Local_u8Counter]);
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	9c 81       	ldd	r25, Y+4	; 0x04
     f78:	fc 01       	movw	r30, r24
     f7a:	e2 0f       	add	r30, r18
     f7c:	f3 1f       	adc	r31, r19
     f7e:	80 81       	ld	r24, Z
     f80:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_voidSendData>
			Local_u8Counter++;
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	8f 5f       	subi	r24, 0xFF	; 255
     f88:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState= OK;
	if(Copy_chString != NULL)
	{
		uint8 Local_u8Counter=0u;
		while(Copy_chString[Local_u8Counter] != '\0')
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	fc 01       	movw	r30, r24
     f96:	e2 0f       	add	r30, r18
     f98:	f3 1f       	adc	r31, r19
     f9a:	80 81       	ld	r24, Z
     f9c:	88 23       	and	r24, r24
     f9e:	39 f7       	brne	.-50     	; 0xf6e <CLCD_u8SendString+0x1e>
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	61 97       	sbiw	r28, 0x11	; 17
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	6e 87       	std	Y+14, r22	; 0x0e
     fcc:	7f 87       	std	Y+15, r23	; 0x0f
     fce:	88 8b       	std	Y+16, r24	; 0x10
     fd0:	99 8b       	std	Y+17, r25	; 0x11
	char Local_chNumberArr[10];
	uint8 Local_u8RightDigit;
	uint8 Local_u8Counter=0;
     fd2:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Local_s8Counter2;

	if (Copy_s32Number == 0)
     fd4:	8e 85       	ldd	r24, Y+14	; 0x0e
     fd6:	9f 85       	ldd	r25, Y+15	; 0x0f
     fd8:	a8 89       	ldd	r26, Y+16	; 0x10
     fda:	b9 89       	ldd	r27, Y+17	; 0x11
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	a1 05       	cpc	r26, r1
     fe0:	b1 05       	cpc	r27, r1
     fe2:	21 f4       	brne	.+8      	; 0xfec <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData('0');
     fe4:	80 e3       	ldi	r24, 0x30	; 48
     fe6:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_voidSendData>
     fea:	69 c0       	rjmp	.+210    	; 0x10be <CLCD_voidSendNumber+0x108>
		return ;
	}
	else if(Copy_s32Number < 0)
     fec:	8e 85       	ldd	r24, Y+14	; 0x0e
     fee:	9f 85       	ldd	r25, Y+15	; 0x0f
     ff0:	a8 89       	ldd	r26, Y+16	; 0x10
     ff2:	b9 89       	ldd	r27, Y+17	; 0x11
     ff4:	bb 23       	and	r27, r27
     ff6:	0c f0       	brlt	.+2      	; 0xffa <CLCD_voidSendNumber+0x44>
     ff8:	43 c0       	rjmp	.+134    	; 0x1080 <CLCD_voidSendNumber+0xca>
	{
		CLCD_voidSendData('-');
     ffa:	8d e2       	ldi	r24, 0x2D	; 45
     ffc:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_voidSendData>
		Copy_s32Number *= -1;
    1000:	8e 85       	ldd	r24, Y+14	; 0x0e
    1002:	9f 85       	ldd	r25, Y+15	; 0x0f
    1004:	a8 89       	ldd	r26, Y+16	; 0x10
    1006:	b9 89       	ldd	r27, Y+17	; 0x11
    1008:	b0 95       	com	r27
    100a:	a0 95       	com	r26
    100c:	90 95       	com	r25
    100e:	81 95       	neg	r24
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	af 4f       	sbci	r26, 0xFF	; 255
    1014:	bf 4f       	sbci	r27, 0xFF	; 255
    1016:	8e 87       	std	Y+14, r24	; 0x0e
    1018:	9f 87       	std	Y+15, r25	; 0x0f
    101a:	a8 8b       	std	Y+16, r26	; 0x10
    101c:	b9 8b       	std	Y+17, r27	; 0x11
    101e:	30 c0       	rjmp	.+96     	; 0x1080 <CLCD_voidSendNumber+0xca>
	}
	while(Copy_s32Number != 0)
	{
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
    1020:	8e 85       	ldd	r24, Y+14	; 0x0e
    1022:	9f 85       	ldd	r25, Y+15	; 0x0f
    1024:	a8 89       	ldd	r26, Y+16	; 0x10
    1026:	b9 89       	ldd	r27, Y+17	; 0x11
    1028:	2a e0       	ldi	r18, 0x0A	; 10
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 b5 19 	call	0x336a	; 0x336a <__divmodsi4>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	8b 83       	std	Y+3, r24	; 0x03
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
    103e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1040:	9f 85       	ldd	r25, Y+15	; 0x0f
    1042:	a8 89       	ldd	r26, Y+16	; 0x10
    1044:	b9 89       	ldd	r27, Y+17	; 0x11
    1046:	2a e0       	ldi	r18, 0x0A	; 10
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	bc 01       	movw	r22, r24
    1050:	cd 01       	movw	r24, r26
    1052:	0e 94 b5 19 	call	0x336a	; 0x336a <__divmodsi4>
    1056:	da 01       	movw	r26, r20
    1058:	c9 01       	movw	r24, r18
    105a:	8e 87       	std	Y+14, r24	; 0x0e
    105c:	9f 87       	std	Y+15, r25	; 0x0f
    105e:	a8 8b       	std	Y+16, r26	; 0x10
    1060:	b9 8b       	std	Y+17, r27	; 0x11
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	48 2f       	mov	r20, r24
    106c:	40 5d       	subi	r20, 0xD0	; 208
    106e:	ce 01       	movw	r24, r28
    1070:	04 96       	adiw	r24, 0x04	; 4
    1072:	fc 01       	movw	r30, r24
    1074:	e2 0f       	add	r30, r18
    1076:	f3 1f       	adc	r31, r19
    1078:	40 83       	st	Z, r20
		Local_u8Counter++;
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	8a 83       	std	Y+2, r24	; 0x02
	else if(Copy_s32Number < 0)
	{
		CLCD_voidSendData('-');
		Copy_s32Number *= -1;
	}
	while(Copy_s32Number != 0)
    1080:	8e 85       	ldd	r24, Y+14	; 0x0e
    1082:	9f 85       	ldd	r25, Y+15	; 0x0f
    1084:	a8 89       	ldd	r26, Y+16	; 0x10
    1086:	b9 89       	ldd	r27, Y+17	; 0x11
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	a1 05       	cpc	r26, r1
    108c:	b1 05       	cpc	r27, r1
    108e:	41 f6       	brne	.-112    	; 0x1020 <CLCD_voidSendNumber+0x6a>
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
		Local_u8Counter++;
	}
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	81 50       	subi	r24, 0x01	; 1
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	10 c0       	rjmp	.+32     	; 0x10b8 <CLCD_voidSendNumber+0x102>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	33 27       	eor	r19, r19
    109e:	27 fd       	sbrc	r18, 7
    10a0:	30 95       	com	r19
    10a2:	ce 01       	movw	r24, r28
    10a4:	04 96       	adiw	r24, 0x04	; 4
    10a6:	fc 01       	movw	r30, r24
    10a8:	e2 0f       	add	r30, r18
    10aa:	f3 1f       	adc	r31, r19
    10ac:	80 81       	ld	r24, Z
    10ae:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_voidSendData>
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
		Local_u8Counter++;
	}
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	81 50       	subi	r24, 0x01	; 1
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	88 23       	and	r24, r24
    10bc:	6c f7       	brge	.-38     	; 0x1098 <CLCD_voidSendNumber+0xe2>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
	}
}
    10be:	61 96       	adiw	r28, 0x11	; 17
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <CLCD_voidGoToXY+0x6>
    10d6:	0f 92       	push	r0
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	8a 83       	std	Y+2, r24	; 0x02
    10de:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8DDRamAdd;
	if(Copy_u8YPos == 0u)
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	88 23       	and	r24, r24
    10e4:	19 f4       	brne	.+6      	; 0x10ec <CLCD_voidGoToXY+0x1c>
	{
		Local_u8DDRamAdd= Copy_u8XPos;
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	89 83       	std	Y+1, r24	; 0x01
    10ea:	06 c0       	rjmp	.+12     	; 0x10f8 <CLCD_voidGoToXY+0x28>
	}
	else if (Copy_u8YPos == 1u)
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	19 f4       	brne	.+6      	; 0x10f8 <CLCD_voidGoToXY+0x28>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	80 5c       	subi	r24, 0xC0	; 192
    10f6:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Set bit 7 for Set DDRAM address command */
	Local_u8DDRamAdd |= 1<<7u;
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	80 68       	ori	r24, 0x80	; 128
    10fc:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSendCmd(Local_u8DDRamAdd);
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <CLCD_voidSendCmd>
}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8Pattern, uint8 Copy_u8PatternNum, uint8 Copy_u8XPos, uint8 Copy_u8YPos )
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	27 97       	sbiw	r28, 0x07	; 7
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	9c 83       	std	Y+4, r25	; 0x04
    1126:	8b 83       	std	Y+3, r24	; 0x03
    1128:	6d 83       	std	Y+5, r22	; 0x05
    112a:	4e 83       	std	Y+6, r20	; 0x06
    112c:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_u8CGRAMAdd= Copy_u8PatternNum * 8u;
    112e:	8d 81       	ldd	r24, Y+5	; 0x05
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8LoopCounter;

	/*Set bit number 6 for Set CGRAM address command*/
	Local_u8CGRAMAdd |= 1<<6u;
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	80 64       	ori	r24, 0x40	; 64
    1146:	8a 83       	std	Y+2, r24	; 0x02

	/*Set CGRAM address*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <CLCD_voidSendCmd>

	/*Write the pattern into CGRAM*/
	for(Local_u8LoopCounter=0; Local_u8LoopCounter<8u; Local_u8LoopCounter++)
    114e:	19 82       	std	Y+1, r1	; 0x01
    1150:	0e c0       	rjmp	.+28     	; 0x116e <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8LoopCounter]);
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	fc 01       	movw	r30, r24
    115e:	e2 0f       	add	r30, r18
    1160:	f3 1f       	adc	r31, r19
    1162:	80 81       	ld	r24, Z
    1164:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_voidSendData>

	/*Set CGRAM address*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	/*Write the pattern into CGRAM*/
	for(Local_u8LoopCounter=0; Local_u8LoopCounter<8u; Local_u8LoopCounter++)
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	8f 5f       	subi	r24, 0xFF	; 255
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	88 30       	cpi	r24, 0x08	; 8
    1172:	78 f3       	brcs	.-34     	; 0x1152 <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8LoopCounter]);
	}

	/*Goto DDRAM to display the pattern*/
	CLCD_voidGoToXY(Copy_u8XPos, Copy_u8YPos);
    1174:	8e 81       	ldd	r24, Y+6	; 0x06
    1176:	6f 81       	ldd	r22, Y+7	; 0x07
    1178:	0e 94 68 08 	call	0x10d0	; 0x10d0 <CLCD_voidGoToXY>

	/*Display the pattern written inside CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
    117c:	8d 81       	ldd	r24, Y+5	; 0x05
    117e:	0e 94 f3 06 	call	0xde6	; 0xde6 <CLCD_voidSendData>
}
    1182:	27 96       	adiw	r28, 0x07	; 7
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <DIO_u8SetPinDirection>:
 * @param Copy_u8Pin
 * @param Copy_u8Direction
 * @return
 */
uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	28 97       	sbiw	r28, 0x08	; 8
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	8a 83       	std	Y+2, r24	; 0x02
    11aa:	6b 83       	std	Y+3, r22	; 0x03
    11ac:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    11ae:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	88 30       	cpi	r24, 0x08	; 8
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <DIO_u8SetPinDirection+0x24>
    11b6:	f4 c0       	rjmp	.+488    	; 0x13a0 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	88 23       	and	r24, r24
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <DIO_u8SetPinDirection+0x2c>
    11be:	77 c0       	rjmp	.+238    	; 0x12ae <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	38 87       	std	Y+8, r19	; 0x08
    11c8:	2f 83       	std	Y+7, r18	; 0x07
    11ca:	8f 81       	ldd	r24, Y+7	; 0x07
    11cc:	98 85       	ldd	r25, Y+8	; 0x08
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	91 05       	cpc	r25, r1
    11d2:	59 f1       	breq	.+86     	; 0x122a <DIO_u8SetPinDirection+0x96>
    11d4:	2f 81       	ldd	r18, Y+7	; 0x07
    11d6:	38 85       	ldd	r19, Y+8	; 0x08
    11d8:	22 30       	cpi	r18, 0x02	; 2
    11da:	31 05       	cpc	r19, r1
    11dc:	2c f4       	brge	.+10     	; 0x11e8 <DIO_u8SetPinDirection+0x54>
    11de:	8f 81       	ldd	r24, Y+7	; 0x07
    11e0:	98 85       	ldd	r25, Y+8	; 0x08
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	69 f0       	breq	.+26     	; 0x1200 <DIO_u8SetPinDirection+0x6c>
    11e6:	60 c0       	rjmp	.+192    	; 0x12a8 <DIO_u8SetPinDirection+0x114>
    11e8:	2f 81       	ldd	r18, Y+7	; 0x07
    11ea:	38 85       	ldd	r19, Y+8	; 0x08
    11ec:	22 30       	cpi	r18, 0x02	; 2
    11ee:	31 05       	cpc	r19, r1
    11f0:	89 f1       	breq	.+98     	; 0x1254 <DIO_u8SetPinDirection+0xc0>
    11f2:	8f 81       	ldd	r24, Y+7	; 0x07
    11f4:	98 85       	ldd	r25, Y+8	; 0x08
    11f6:	83 30       	cpi	r24, 0x03	; 3
    11f8:	91 05       	cpc	r25, r1
    11fa:	09 f4       	brne	.+2      	; 0x11fe <DIO_u8SetPinDirection+0x6a>
    11fc:	40 c0       	rjmp	.+128    	; 0x127e <DIO_u8SetPinDirection+0xea>
    11fe:	54 c0       	rjmp	.+168    	; 0x12a8 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    1200:	aa e3       	ldi	r26, 0x3A	; 58
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	ea e3       	ldi	r30, 0x3A	; 58
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_u8SetPinDirection+0x8a>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_u8SetPinDirection+0x86>
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	bd c0       	rjmp	.+378    	; 0x13a4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    122a:	a7 e3       	ldi	r26, 0x37	; 55
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e7 e3       	ldi	r30, 0x37	; 55
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_u8SetPinDirection+0xb4>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_u8SetPinDirection+0xb0>
    124c:	80 95       	com	r24
    124e:	84 23       	and	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	a8 c0       	rjmp	.+336    	; 0x13a4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    1254:	a4 e3       	ldi	r26, 0x34	; 52
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e4 e3       	ldi	r30, 0x34	; 52
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_u8SetPinDirection+0xde>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_u8SetPinDirection+0xda>
    1276:	80 95       	com	r24
    1278:	84 23       	and	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	93 c0       	rjmp	.+294    	; 0x13a4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    127e:	a1 e3       	ldi	r26, 0x31	; 49
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e1 e3       	ldi	r30, 0x31	; 49
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <DIO_u8SetPinDirection+0x108>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <DIO_u8SetPinDirection+0x104>
    12a0:	80 95       	com	r24
    12a2:	84 23       	and	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	7e c0       	rjmp	.+252    	; 0x13a4 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState= NOK; break;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	7b c0       	rjmp	.+246    	; 0x13a4 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <DIO_u8SetPinDirection+0x122>
    12b4:	72 c0       	rjmp	.+228    	; 0x139a <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	3e 83       	std	Y+6, r19	; 0x06
    12be:	2d 83       	std	Y+5, r18	; 0x05
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	91 05       	cpc	r25, r1
    12c8:	49 f1       	breq	.+82     	; 0x131c <DIO_u8SetPinDirection+0x188>
    12ca:	2d 81       	ldd	r18, Y+5	; 0x05
    12cc:	3e 81       	ldd	r19, Y+6	; 0x06
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	2c f4       	brge	.+10     	; 0x12de <DIO_u8SetPinDirection+0x14a>
    12d4:	8d 81       	ldd	r24, Y+5	; 0x05
    12d6:	9e 81       	ldd	r25, Y+6	; 0x06
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	61 f0       	breq	.+24     	; 0x12f4 <DIO_u8SetPinDirection+0x160>
    12dc:	5b c0       	rjmp	.+182    	; 0x1394 <DIO_u8SetPinDirection+0x200>
    12de:	2d 81       	ldd	r18, Y+5	; 0x05
    12e0:	3e 81       	ldd	r19, Y+6	; 0x06
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	71 f1       	breq	.+92     	; 0x1344 <DIO_u8SetPinDirection+0x1b0>
    12e8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ea:	9e 81       	ldd	r25, Y+6	; 0x06
    12ec:	83 30       	cpi	r24, 0x03	; 3
    12ee:	91 05       	cpc	r25, r1
    12f0:	e9 f1       	breq	.+122    	; 0x136c <DIO_u8SetPinDirection+0x1d8>
    12f2:	50 c0       	rjmp	.+160    	; 0x1394 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    12f4:	aa e3       	ldi	r26, 0x3A	; 58
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	ea e3       	ldi	r30, 0x3A	; 58
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_u8SetPinDirection+0x17e>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_u8SetPinDirection+0x17a>
    1316:	84 2b       	or	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	44 c0       	rjmp	.+136    	; 0x13a4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    131c:	a7 e3       	ldi	r26, 0x37	; 55
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e7 e3       	ldi	r30, 0x37	; 55
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_u8SetPinDirection+0x1a6>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_u8SetPinDirection+0x1a2>
    133e:	84 2b       	or	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	30 c0       	rjmp	.+96     	; 0x13a4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    1344:	a4 e3       	ldi	r26, 0x34	; 52
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e4 e3       	ldi	r30, 0x34	; 52
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_u8SetPinDirection+0x1ce>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_u8SetPinDirection+0x1ca>
    1366:	84 2b       	or	r24, r20
    1368:	8c 93       	st	X, r24
    136a:	1c c0       	rjmp	.+56     	; 0x13a4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    136c:	a1 e3       	ldi	r26, 0x31	; 49
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e1 e3       	ldi	r30, 0x31	; 49
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_u8SetPinDirection+0x1f6>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO_u8SetPinDirection+0x1f2>
    138e:	84 2b       	or	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	08 c0       	rjmp	.+16     	; 0x13a4 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState= NOK; break;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	05 c0       	rjmp	.+10     	; 0x13a4 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a6:	28 96       	adiw	r28, 0x08	; 8
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	28 97       	sbiw	r28, 0x08	; 8
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	8a 83       	std	Y+2, r24	; 0x02
    13ce:	6b 83       	std	Y+3, r22	; 0x03
    13d0:	4c 83       	std	Y+4, r20	; 0x04

	uint8 Local_u8ErrorState = OK;
    13d2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	88 30       	cpi	r24, 0x08	; 8
    13d8:	08 f0       	brcs	.+2      	; 0x13dc <DIO_u8SetPinValue+0x24>
    13da:	f4 c0       	rjmp	.+488    	; 0x15c4 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    13dc:	8c 81       	ldd	r24, Y+4	; 0x04
    13de:	88 23       	and	r24, r24
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <DIO_u8SetPinValue+0x2c>
    13e2:	77 c0       	rjmp	.+238    	; 0x14d2 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	38 87       	std	Y+8, r19	; 0x08
    13ec:	2f 83       	std	Y+7, r18	; 0x07
    13ee:	8f 81       	ldd	r24, Y+7	; 0x07
    13f0:	98 85       	ldd	r25, Y+8	; 0x08
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	91 05       	cpc	r25, r1
    13f6:	59 f1       	breq	.+86     	; 0x144e <DIO_u8SetPinValue+0x96>
    13f8:	2f 81       	ldd	r18, Y+7	; 0x07
    13fa:	38 85       	ldd	r19, Y+8	; 0x08
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	2c f4       	brge	.+10     	; 0x140c <DIO_u8SetPinValue+0x54>
    1402:	8f 81       	ldd	r24, Y+7	; 0x07
    1404:	98 85       	ldd	r25, Y+8	; 0x08
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	69 f0       	breq	.+26     	; 0x1424 <DIO_u8SetPinValue+0x6c>
    140a:	60 c0       	rjmp	.+192    	; 0x14cc <DIO_u8SetPinValue+0x114>
    140c:	2f 81       	ldd	r18, Y+7	; 0x07
    140e:	38 85       	ldd	r19, Y+8	; 0x08
    1410:	22 30       	cpi	r18, 0x02	; 2
    1412:	31 05       	cpc	r19, r1
    1414:	89 f1       	breq	.+98     	; 0x1478 <DIO_u8SetPinValue+0xc0>
    1416:	8f 81       	ldd	r24, Y+7	; 0x07
    1418:	98 85       	ldd	r25, Y+8	; 0x08
    141a:	83 30       	cpi	r24, 0x03	; 3
    141c:	91 05       	cpc	r25, r1
    141e:	09 f4       	brne	.+2      	; 0x1422 <DIO_u8SetPinValue+0x6a>
    1420:	40 c0       	rjmp	.+128    	; 0x14a2 <DIO_u8SetPinValue+0xea>
    1422:	54 c0       	rjmp	.+168    	; 0x14cc <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1424:	ab e3       	ldi	r26, 0x3B	; 59
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	eb e3       	ldi	r30, 0x3B	; 59
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_u8SetPinValue+0x8a>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_u8SetPinValue+0x86>
    1446:	80 95       	com	r24
    1448:	84 23       	and	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	bd c0       	rjmp	.+378    	; 0x15c8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    144e:	a8 e3       	ldi	r26, 0x38	; 56
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e8 e3       	ldi	r30, 0x38	; 56
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_u8SetPinValue+0xb4>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_u8SetPinValue+0xb0>
    1470:	80 95       	com	r24
    1472:	84 23       	and	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	a8 c0       	rjmp	.+336    	; 0x15c8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1478:	a5 e3       	ldi	r26, 0x35	; 53
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e5 e3       	ldi	r30, 0x35	; 53
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_u8SetPinValue+0xde>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <DIO_u8SetPinValue+0xda>
    149a:	80 95       	com	r24
    149c:	84 23       	and	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	93 c0       	rjmp	.+294    	; 0x15c8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    14a2:	a2 e3       	ldi	r26, 0x32	; 50
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e2 e3       	ldi	r30, 0x32	; 50
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_u8SetPinValue+0x108>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_u8SetPinValue+0x104>
    14c4:	80 95       	com	r24
    14c6:	84 23       	and	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	7e c0       	rjmp	.+252    	; 0x15c8 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState= NOK; break;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	7b c0       	rjmp	.+246    	; 0x15c8 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	09 f0       	breq	.+2      	; 0x14da <DIO_u8SetPinValue+0x122>
    14d8:	72 c0       	rjmp	.+228    	; 0x15be <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	3e 83       	std	Y+6, r19	; 0x06
    14e2:	2d 83       	std	Y+5, r18	; 0x05
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	91 05       	cpc	r25, r1
    14ec:	49 f1       	breq	.+82     	; 0x1540 <DIO_u8SetPinValue+0x188>
    14ee:	2d 81       	ldd	r18, Y+5	; 0x05
    14f0:	3e 81       	ldd	r19, Y+6	; 0x06
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	31 05       	cpc	r19, r1
    14f6:	2c f4       	brge	.+10     	; 0x1502 <DIO_u8SetPinValue+0x14a>
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	61 f0       	breq	.+24     	; 0x1518 <DIO_u8SetPinValue+0x160>
    1500:	5b c0       	rjmp	.+182    	; 0x15b8 <DIO_u8SetPinValue+0x200>
    1502:	2d 81       	ldd	r18, Y+5	; 0x05
    1504:	3e 81       	ldd	r19, Y+6	; 0x06
    1506:	22 30       	cpi	r18, 0x02	; 2
    1508:	31 05       	cpc	r19, r1
    150a:	71 f1       	breq	.+92     	; 0x1568 <DIO_u8SetPinValue+0x1b0>
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	83 30       	cpi	r24, 0x03	; 3
    1512:	91 05       	cpc	r25, r1
    1514:	e9 f1       	breq	.+122    	; 0x1590 <DIO_u8SetPinValue+0x1d8>
    1516:	50 c0       	rjmp	.+160    	; 0x15b8 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1518:	ab e3       	ldi	r26, 0x3B	; 59
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	eb e3       	ldi	r30, 0x3B	; 59
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 2e       	mov	r0, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <DIO_u8SetPinValue+0x17e>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <DIO_u8SetPinValue+0x17a>
    153a:	84 2b       	or	r24, r20
    153c:	8c 93       	st	X, r24
    153e:	44 c0       	rjmp	.+136    	; 0x15c8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1540:	a8 e3       	ldi	r26, 0x38	; 56
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e8 e3       	ldi	r30, 0x38	; 56
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_u8SetPinValue+0x1a6>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_u8SetPinValue+0x1a2>
    1562:	84 2b       	or	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	30 c0       	rjmp	.+96     	; 0x15c8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1568:	a5 e3       	ldi	r26, 0x35	; 53
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e5 e3       	ldi	r30, 0x35	; 53
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_u8SetPinValue+0x1ce>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_u8SetPinValue+0x1ca>
    158a:	84 2b       	or	r24, r20
    158c:	8c 93       	st	X, r24
    158e:	1c c0       	rjmp	.+56     	; 0x15c8 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1590:	a2 e3       	ldi	r26, 0x32	; 50
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e2 e3       	ldi	r30, 0x32	; 50
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	48 2f       	mov	r20, r24
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	02 2e       	mov	r0, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_u8SetPinValue+0x1f6>
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	0a 94       	dec	r0
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_u8SetPinValue+0x1f2>
    15b2:	84 2b       	or	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	08 c0       	rjmp	.+16     	; 0x15c8 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState= NOK; break;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	05 c0       	rjmp	.+10     	; 0x15c8 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    15c8:	89 81       	ldd	r24, Y+1	; 0x01

}
    15ca:	28 96       	adiw	r28, 0x08	; 8
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* Copy_pu8Value)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	27 97       	sbiw	r28, 0x07	; 7
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	8a 83       	std	Y+2, r24	; 0x02
    15f2:	6b 83       	std	Y+3, r22	; 0x03
    15f4:	5d 83       	std	Y+5, r21	; 0x05
    15f6:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    15f8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != NULL)
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	9d 81       	ldd	r25, Y+5	; 0x05
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	09 f4       	brne	.+2      	; 0x1604 <DIO_u8GetPinValue+0x28>
    1602:	7b c0       	rjmp	.+246    	; 0x16fa <DIO_u8GetPinValue+0x11e>
	{
		if(Copy_u8Pin<= DIO_u8PIN7)
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	88 30       	cpi	r24, 0x08	; 8
    1608:	08 f0       	brcs	.+2      	; 0x160c <DIO_u8GetPinValue+0x30>
    160a:	74 c0       	rjmp	.+232    	; 0x16f4 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	3f 83       	std	Y+7, r19	; 0x07
    1614:	2e 83       	std	Y+6, r18	; 0x06
    1616:	4e 81       	ldd	r20, Y+6	; 0x06
    1618:	5f 81       	ldd	r21, Y+7	; 0x07
    161a:	41 30       	cpi	r20, 0x01	; 1
    161c:	51 05       	cpc	r21, r1
    161e:	59 f1       	breq	.+86     	; 0x1676 <DIO_u8GetPinValue+0x9a>
    1620:	8e 81       	ldd	r24, Y+6	; 0x06
    1622:	9f 81       	ldd	r25, Y+7	; 0x07
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	91 05       	cpc	r25, r1
    1628:	34 f4       	brge	.+12     	; 0x1636 <DIO_u8GetPinValue+0x5a>
    162a:	2e 81       	ldd	r18, Y+6	; 0x06
    162c:	3f 81       	ldd	r19, Y+7	; 0x07
    162e:	21 15       	cp	r18, r1
    1630:	31 05       	cpc	r19, r1
    1632:	69 f0       	breq	.+26     	; 0x164e <DIO_u8GetPinValue+0x72>
    1634:	5c c0       	rjmp	.+184    	; 0x16ee <DIO_u8GetPinValue+0x112>
    1636:	4e 81       	ldd	r20, Y+6	; 0x06
    1638:	5f 81       	ldd	r21, Y+7	; 0x07
    163a:	42 30       	cpi	r20, 0x02	; 2
    163c:	51 05       	cpc	r21, r1
    163e:	79 f1       	breq	.+94     	; 0x169e <DIO_u8GetPinValue+0xc2>
    1640:	8e 81       	ldd	r24, Y+6	; 0x06
    1642:	9f 81       	ldd	r25, Y+7	; 0x07
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	91 05       	cpc	r25, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <DIO_u8GetPinValue+0x70>
    164a:	3d c0       	rjmp	.+122    	; 0x16c6 <DIO_u8GetPinValue+0xea>
    164c:	50 c0       	rjmp	.+160    	; 0x16ee <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value= GET_BIT(PINA, Copy_u8Pin); break;
    164e:	e9 e3       	ldi	r30, 0x39	; 57
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a9 01       	movw	r20, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <DIO_u8GetPinValue+0x8a>
    1662:	55 95       	asr	r21
    1664:	47 95       	ror	r20
    1666:	8a 95       	dec	r24
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <DIO_u8GetPinValue+0x86>
    166a:	ca 01       	movw	r24, r20
    166c:	81 70       	andi	r24, 0x01	; 1
    166e:	ec 81       	ldd	r30, Y+4	; 0x04
    1670:	fd 81       	ldd	r31, Y+5	; 0x05
    1672:	80 83       	st	Z, r24
    1674:	44 c0       	rjmp	.+136    	; 0x16fe <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTB: *Copy_pu8Value= GET_BIT(PINB, Copy_u8Pin); break;
    1676:	e6 e3       	ldi	r30, 0x36	; 54
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	88 2f       	mov	r24, r24
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a9 01       	movw	r20, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <DIO_u8GetPinValue+0xb2>
    168a:	55 95       	asr	r21
    168c:	47 95       	ror	r20
    168e:	8a 95       	dec	r24
    1690:	e2 f7       	brpl	.-8      	; 0x168a <DIO_u8GetPinValue+0xae>
    1692:	ca 01       	movw	r24, r20
    1694:	81 70       	andi	r24, 0x01	; 1
    1696:	ec 81       	ldd	r30, Y+4	; 0x04
    1698:	fd 81       	ldd	r31, Y+5	; 0x05
    169a:	80 83       	st	Z, r24
    169c:	30 c0       	rjmp	.+96     	; 0x16fe <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTC: *Copy_pu8Value= GET_BIT(PINC, Copy_u8Pin); break;
    169e:	e3 e3       	ldi	r30, 0x33	; 51
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	a9 01       	movw	r20, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <DIO_u8GetPinValue+0xda>
    16b2:	55 95       	asr	r21
    16b4:	47 95       	ror	r20
    16b6:	8a 95       	dec	r24
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <DIO_u8GetPinValue+0xd6>
    16ba:	ca 01       	movw	r24, r20
    16bc:	81 70       	andi	r24, 0x01	; 1
    16be:	ec 81       	ldd	r30, Y+4	; 0x04
    16c0:	fd 81       	ldd	r31, Y+5	; 0x05
    16c2:	80 83       	st	Z, r24
    16c4:	1c c0       	rjmp	.+56     	; 0x16fe <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTD: *Copy_pu8Value= GET_BIT(PIND, Copy_u8Pin); break;
    16c6:	e0 e3       	ldi	r30, 0x30	; 48
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	88 2f       	mov	r24, r24
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a9 01       	movw	r20, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <DIO_u8GetPinValue+0x102>
    16da:	55 95       	asr	r21
    16dc:	47 95       	ror	r20
    16de:	8a 95       	dec	r24
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <DIO_u8GetPinValue+0xfe>
    16e2:	ca 01       	movw	r24, r20
    16e4:	81 70       	andi	r24, 0x01	; 1
    16e6:	ec 81       	ldd	r30, Y+4	; 0x04
    16e8:	fd 81       	ldd	r31, Y+5	; 0x05
    16ea:	80 83       	st	Z, r24
    16ec:	08 c0       	rjmp	.+16     	; 0x16fe <DIO_u8GetPinValue+0x122>
			default: Local_u8ErrorState= NOK; break;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	05 c0       	rjmp	.+10     	; 0x16fe <DIO_u8GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <DIO_u8GetPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1700:	27 96       	adiw	r28, 0x07	; 7
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	00 d0       	rcall	.+0      	; 0x1718 <DIO_u8SetPortDirection+0x6>
    1718:	00 d0       	rcall	.+0      	; 0x171a <DIO_u8SetPortDirection+0x8>
    171a:	0f 92       	push	r0
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	8a 83       	std	Y+2, r24	; 0x02
    1722:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1724:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	3d 83       	std	Y+5, r19	; 0x05
    172e:	2c 83       	std	Y+4, r18	; 0x04
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
    1732:	9d 81       	ldd	r25, Y+5	; 0x05
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	91 05       	cpc	r25, r1
    1738:	d1 f0       	breq	.+52     	; 0x176e <DIO_u8SetPortDirection+0x5c>
    173a:	2c 81       	ldd	r18, Y+4	; 0x04
    173c:	3d 81       	ldd	r19, Y+5	; 0x05
    173e:	22 30       	cpi	r18, 0x02	; 2
    1740:	31 05       	cpc	r19, r1
    1742:	2c f4       	brge	.+10     	; 0x174e <DIO_u8SetPortDirection+0x3c>
    1744:	8c 81       	ldd	r24, Y+4	; 0x04
    1746:	9d 81       	ldd	r25, Y+5	; 0x05
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	61 f0       	breq	.+24     	; 0x1764 <DIO_u8SetPortDirection+0x52>
    174c:	1f c0       	rjmp	.+62     	; 0x178c <DIO_u8SetPortDirection+0x7a>
    174e:	2c 81       	ldd	r18, Y+4	; 0x04
    1750:	3d 81       	ldd	r19, Y+5	; 0x05
    1752:	22 30       	cpi	r18, 0x02	; 2
    1754:	31 05       	cpc	r19, r1
    1756:	81 f0       	breq	.+32     	; 0x1778 <DIO_u8SetPortDirection+0x66>
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	9d 81       	ldd	r25, Y+5	; 0x05
    175c:	83 30       	cpi	r24, 0x03	; 3
    175e:	91 05       	cpc	r25, r1
    1760:	81 f0       	breq	.+32     	; 0x1782 <DIO_u8SetPortDirection+0x70>
    1762:	14 c0       	rjmp	.+40     	; 0x178c <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction; break;
    1764:	ea e3       	ldi	r30, 0x3A	; 58
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	80 83       	st	Z, r24
    176c:	11 c0       	rjmp	.+34     	; 0x1790 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
    176e:	e7 e3       	ldi	r30, 0x37	; 55
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	80 83       	st	Z, r24
    1776:	0c c0       	rjmp	.+24     	; 0x1790 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
    1778:	e4 e3       	ldi	r30, 0x34	; 52
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	80 83       	st	Z, r24
    1780:	07 c0       	rjmp	.+14     	; 0x1790 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
    1782:	e1 e3       	ldi	r30, 0x31	; 49
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	80 83       	st	Z, r24
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState= NOK; break;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1790:	89 81       	ldd	r24, Y+1	; 0x01
}
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <DIO_u8SetPortValue+0x6>
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <DIO_u8SetPortValue+0x8>
    17aa:	0f 92       	push	r0
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	8a 83       	std	Y+2, r24	; 0x02
    17b2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    17b4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3d 83       	std	Y+5, r19	; 0x05
    17be:	2c 83       	std	Y+4, r18	; 0x04
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	d1 f0       	breq	.+52     	; 0x17fe <DIO_u8SetPortValue+0x5c>
    17ca:	2c 81       	ldd	r18, Y+4	; 0x04
    17cc:	3d 81       	ldd	r19, Y+5	; 0x05
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	2c f4       	brge	.+10     	; 0x17de <DIO_u8SetPortValue+0x3c>
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	9d 81       	ldd	r25, Y+5	; 0x05
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	61 f0       	breq	.+24     	; 0x17f4 <DIO_u8SetPortValue+0x52>
    17dc:	1f c0       	rjmp	.+62     	; 0x181c <DIO_u8SetPortValue+0x7a>
    17de:	2c 81       	ldd	r18, Y+4	; 0x04
    17e0:	3d 81       	ldd	r19, Y+5	; 0x05
    17e2:	22 30       	cpi	r18, 0x02	; 2
    17e4:	31 05       	cpc	r19, r1
    17e6:	81 f0       	breq	.+32     	; 0x1808 <DIO_u8SetPortValue+0x66>
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	9d 81       	ldd	r25, Y+5	; 0x05
    17ec:	83 30       	cpi	r24, 0x03	; 3
    17ee:	91 05       	cpc	r25, r1
    17f0:	81 f0       	breq	.+32     	; 0x1812 <DIO_u8SetPortValue+0x70>
    17f2:	14 c0       	rjmp	.+40     	; 0x181c <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    17f4:	eb e3       	ldi	r30, 0x3B	; 59
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	80 83       	st	Z, r24
    17fc:	11 c0       	rjmp	.+34     	; 0x1820 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    17fe:	e8 e3       	ldi	r30, 0x38	; 56
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	80 83       	st	Z, r24
    1806:	0c c0       	rjmp	.+24     	; 0x1820 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    1808:	e5 e3       	ldi	r30, 0x35	; 53
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	80 83       	st	Z, r24
    1810:	07 c0       	rjmp	.+14     	; 0x1820 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1812:	e2 e3       	ldi	r30, 0x32	; 50
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	80 83       	st	Z, r24
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState= NOK; break;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1820:	89 81       	ldd	r24, Y+1	; 0x01
}
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	00 d0       	rcall	.+0      	; 0x1838 <DIO_u8TogglePinValue+0x6>
    1838:	00 d0       	rcall	.+0      	; 0x183a <DIO_u8TogglePinValue+0x8>
    183a:	0f 92       	push	r0
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	8a 83       	std	Y+2, r24	; 0x02
    1842:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1844:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	88 30       	cpi	r24, 0x08	; 8
    184a:	08 f0       	brcs	.+2      	; 0x184e <DIO_u8TogglePinValue+0x1c>
    184c:	72 c0       	rjmp	.+228    	; 0x1932 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	3d 83       	std	Y+5, r19	; 0x05
    1856:	2c 83       	std	Y+4, r18	; 0x04
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	9d 81       	ldd	r25, Y+5	; 0x05
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	91 05       	cpc	r25, r1
    1860:	49 f1       	breq	.+82     	; 0x18b4 <DIO_u8TogglePinValue+0x82>
    1862:	2c 81       	ldd	r18, Y+4	; 0x04
    1864:	3d 81       	ldd	r19, Y+5	; 0x05
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	2c f4       	brge	.+10     	; 0x1876 <DIO_u8TogglePinValue+0x44>
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	9d 81       	ldd	r25, Y+5	; 0x05
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	61 f0       	breq	.+24     	; 0x188c <DIO_u8TogglePinValue+0x5a>
    1874:	5b c0       	rjmp	.+182    	; 0x192c <DIO_u8TogglePinValue+0xfa>
    1876:	2c 81       	ldd	r18, Y+4	; 0x04
    1878:	3d 81       	ldd	r19, Y+5	; 0x05
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	71 f1       	breq	.+92     	; 0x18dc <DIO_u8TogglePinValue+0xaa>
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	e9 f1       	breq	.+122    	; 0x1904 <DIO_u8TogglePinValue+0xd2>
    188a:	50 c0       	rjmp	.+160    	; 0x192c <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin); break;
    188c:	ab e3       	ldi	r26, 0x3B	; 59
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	eb e3       	ldi	r30, 0x3B	; 59
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 2e       	mov	r0, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_u8TogglePinValue+0x78>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <DIO_u8TogglePinValue+0x74>
    18ae:	84 27       	eor	r24, r20
    18b0:	8c 93       	st	X, r24
    18b2:	41 c0       	rjmp	.+130    	; 0x1936 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin); break;
    18b4:	a8 e3       	ldi	r26, 0x38	; 56
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e8 e3       	ldi	r30, 0x38	; 56
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	48 2f       	mov	r20, r24
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 2e       	mov	r0, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <DIO_u8TogglePinValue+0xa0>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	0a 94       	dec	r0
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <DIO_u8TogglePinValue+0x9c>
    18d6:	84 27       	eor	r24, r20
    18d8:	8c 93       	st	X, r24
    18da:	2d c0       	rjmp	.+90     	; 0x1936 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin); break;
    18dc:	a5 e3       	ldi	r26, 0x35	; 53
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e5 e3       	ldi	r30, 0x35	; 53
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	48 2f       	mov	r20, r24
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	02 2e       	mov	r0, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <DIO_u8TogglePinValue+0xc8>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	0a 94       	dec	r0
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <DIO_u8TogglePinValue+0xc4>
    18fe:	84 27       	eor	r24, r20
    1900:	8c 93       	st	X, r24
    1902:	19 c0       	rjmp	.+50     	; 0x1936 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin); break;
    1904:	a2 e3       	ldi	r26, 0x32	; 50
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e2 e3       	ldi	r30, 0x32	; 50
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	48 2f       	mov	r20, r24
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	02 2e       	mov	r0, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <DIO_u8TogglePinValue+0xf0>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	0a 94       	dec	r0
    1924:	e2 f7       	brpl	.-8      	; 0x191e <DIO_u8TogglePinValue+0xec>
    1926:	84 27       	eor	r24, r20
    1928:	8c 93       	st	X, r24
    192a:	05 c0       	rjmp	.+10     	; 0x1936 <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState= NOK; break;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1936:	89 81       	ldd	r24, Y+1	; 0x01
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <EXTI_voidInitInt0>:
#include "EXTI_cfg.h"

static void (*EXTI_pfINTFuncPtr[3])(void)= {NULL};/*array of pointers to functions to hold ISR callback*/

void EXTI_voidInitInt0(void)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR, MCUCR_ISC01);
#elif INT0_SENSE_CTRL == EXTI_u8ON_CHANGE
	SET_BIT(MCUCR, MCUCR_ISC00);
	CLR_BIT(MCUCR, MCUCR_ISC01);
#elif INT0_SENSE_CTRL == EXTI_u8RISING_EDGE
	CLR_BIT(MCUCR, MCUCR_ISC00);
    1950:	a5 e5       	ldi	r26, 0x55	; 85
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e5 e5       	ldi	r30, 0x55	; 85
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	8e 7f       	andi	r24, 0xFE	; 254
    195c:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_ISC01);
    195e:	a5 e5       	ldi	r26, 0x55	; 85
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e5 e5       	ldi	r30, 0x55	; 85
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	82 60       	ori	r24, 0x02	; 2
    196a:	8c 93       	st	X, r24
#endif

#if INT0_INITIAL_STATE  == DISABLE
	CLR_BIT(GICR, GICR_INIT0);
#elif INT0_INITIAL_STATE  == ENABLE
	SET_BIT(GICR, GICR_INIT0);
    196c:	ab e5       	ldi	r26, 0x5B	; 91
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	eb e5       	ldi	r30, 0x5B	; 91
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	80 64       	ori	r24, 0x40	; 64
    1978:	8c 93       	st	X, r24
#else
#error Wrong INT0_SENSE_CTRL configuration option
#endif
	return;
}
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <EXTI_voidInitInt1>:
void EXTI_voidInitInt1(void)
{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR, MCUCR_ISC11);
#elif INT1_SENSE_CTRL == EXTI_u8RISING_EDGE
	CLR_BIT(MCUCR, MCUCR_ISC10);
	SET_BIT(MCUCR, MCUCR_ISC11);
#elif INT1_SENSE_CTRL == EXTI_u8FALLING_EDGE
	SET_BIT(MCUCR, MCUCR_ISC10);
    1988:	a5 e5       	ldi	r26, 0x55	; 85
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e5 e5       	ldi	r30, 0x55	; 85
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	84 60       	ori	r24, 0x04	; 4
    1994:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_ISC11);
    1996:	a5 e5       	ldi	r26, 0x55	; 85
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e5 e5       	ldi	r30, 0x55	; 85
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	88 60       	ori	r24, 0x08	; 8
    19a2:	8c 93       	st	X, r24
#endif

#if INT1_INITIAL_STATE  == DISABLE
	CLR_BIT(GICR, GICR_INIT0);
#elif INT1_INITIAL_STATE  == ENABLE
	SET_BIT(GICR, GICR_INIT1);
    19a4:	ab e5       	ldi	r26, 0x5B	; 91
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	eb e5       	ldi	r30, 0x5B	; 91
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	80 68       	ori	r24, 0x80	; 128
    19b0:	8c 93       	st	X, r24
#else
#error Wrong INT0_SENSE_CTRL configuration option
#endif
	return;
}
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <EXTI_voidInitInt2>:

void EXTI_voidInitInt2(void)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
#if INIT2_SENSE_CTRL == EXTI_u8RISING_EDGE
	CLR_BIT(MCUCR, MCUCR_ISC2);
#elif INIT2_SENSE_CTRL == EXTI_u8FALLING_EDGE
	SET_BIT(MCUCR, MCUCR_ISC2);
    19c0:	a5 e5       	ldi	r26, 0x55	; 85
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e5 e5       	ldi	r30, 0x55	; 85
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	80 64       	ori	r24, 0x40	; 64
    19cc:	8c 93       	st	X, r24
#endif

#if INT2_INITIAL_STATE  == DISABLE
	CLR_BIT(GICR, GICR_INIT2);
#elif INT2_INITIAL_STATE  == ENABLE
	SET_BIT(GICR, GICR_INIT2);
    19ce:	ab e5       	ldi	r26, 0x5B	; 91
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	eb e5       	ldi	r30, 0x5B	; 91
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	80 62       	ori	r24, 0x20	; 32
    19da:	8c 93       	st	X, r24
#else
#error Wrong INT2_SENSE_CTRL configuration option
#endif
	return;
}
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <EXTI_u8SetSenseCtrl>:
uint8 EXTI_u8SetSenseCtrl(uint8 Copy_u8IntNum, uint8 Copy_u8Sense)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	2b 97       	sbiw	r28, 0x0b	; 11
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	8a 83       	std	Y+2, r24	; 0x02
    19f8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    19fa:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8IntNum)
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	3b 87       	std	Y+11, r19	; 0x0b
    1a04:	2a 87       	std	Y+10, r18	; 0x0a
    1a06:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a08:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <EXTI_u8SetSenseCtrl+0x30>
    1a10:	6a c0       	rjmp	.+212    	; 0x1ae6 <EXTI_u8SetSenseCtrl+0x104>
    1a12:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a14:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a16:	22 30       	cpi	r18, 0x02	; 2
    1a18:	31 05       	cpc	r19, r1
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <EXTI_u8SetSenseCtrl+0x3c>
    1a1c:	c0 c0       	rjmp	.+384    	; 0x1b9e <EXTI_u8SetSenseCtrl+0x1bc>
    1a1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a20:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <EXTI_u8SetSenseCtrl+0x46>
    1a26:	e8 c0       	rjmp	.+464    	; 0x1bf8 <EXTI_u8SetSenseCtrl+0x216>
	{
	case EXTI_u8INT0:
		switch (Copy_u8Sense)
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	39 87       	std	Y+9, r19	; 0x09
    1a30:	28 87       	std	Y+8, r18	; 0x08
    1a32:	88 85       	ldd	r24, Y+8	; 0x08
    1a34:	99 85       	ldd	r25, Y+9	; 0x09
    1a36:	82 30       	cpi	r24, 0x02	; 2
    1a38:	91 05       	cpc	r25, r1
    1a3a:	29 f1       	breq	.+74     	; 0x1a86 <EXTI_u8SetSenseCtrl+0xa4>
    1a3c:	28 85       	ldd	r18, Y+8	; 0x08
    1a3e:	39 85       	ldd	r19, Y+9	; 0x09
    1a40:	23 30       	cpi	r18, 0x03	; 3
    1a42:	31 05       	cpc	r19, r1
    1a44:	34 f4       	brge	.+12     	; 0x1a52 <EXTI_u8SetSenseCtrl+0x70>
    1a46:	88 85       	ldd	r24, Y+8	; 0x08
    1a48:	99 85       	ldd	r25, Y+9	; 0x09
    1a4a:	81 30       	cpi	r24, 0x01	; 1
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	61 f0       	breq	.+24     	; 0x1a68 <EXTI_u8SetSenseCtrl+0x86>
    1a50:	47 c0       	rjmp	.+142    	; 0x1ae0 <EXTI_u8SetSenseCtrl+0xfe>
    1a52:	28 85       	ldd	r18, Y+8	; 0x08
    1a54:	39 85       	ldd	r19, Y+9	; 0x09
    1a56:	23 30       	cpi	r18, 0x03	; 3
    1a58:	31 05       	cpc	r19, r1
    1a5a:	99 f1       	breq	.+102    	; 0x1ac2 <EXTI_u8SetSenseCtrl+0xe0>
    1a5c:	88 85       	ldd	r24, Y+8	; 0x08
    1a5e:	99 85       	ldd	r25, Y+9	; 0x09
    1a60:	84 30       	cpi	r24, 0x04	; 4
    1a62:	91 05       	cpc	r25, r1
    1a64:	f9 f0       	breq	.+62     	; 0x1aa4 <EXTI_u8SetSenseCtrl+0xc2>
    1a66:	3c c0       	rjmp	.+120    	; 0x1ae0 <EXTI_u8SetSenseCtrl+0xfe>
		{
			case EXTI_u8LOW_LEVEL: CLR_BIT(MCUCR, MCUCR_ISC00);     CLR_BIT(MCUCR, MCUCR_ISC00); break;
    1a68:	a5 e5       	ldi	r26, 0x55	; 85
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e5 e5       	ldi	r30, 0x55	; 85
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	8e 7f       	andi	r24, 0xFE	; 254
    1a74:	8c 93       	st	X, r24
    1a76:	a5 e5       	ldi	r26, 0x55	; 85
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e5 e5       	ldi	r30, 0x55	; 85
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	8e 7f       	andi	r24, 0xFE	; 254
    1a82:	8c 93       	st	X, r24
    1a84:	bb c0       	rjmp	.+374    	; 0x1bfc <EXTI_u8SetSenseCtrl+0x21a>
			case EXTI_u8ON_CHANGE: SET_BIT(MCUCR, MCUCR_ISC00);     CLR_BIT(MCUCR, MCUCR_ISC00); break;
    1a86:	a5 e5       	ldi	r26, 0x55	; 85
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e5 e5       	ldi	r30, 0x55	; 85
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	81 60       	ori	r24, 0x01	; 1
    1a92:	8c 93       	st	X, r24
    1a94:	a5 e5       	ldi	r26, 0x55	; 85
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e5 e5       	ldi	r30, 0x55	; 85
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	8e 7f       	andi	r24, 0xFE	; 254
    1aa0:	8c 93       	st	X, r24
    1aa2:	ac c0       	rjmp	.+344    	; 0x1bfc <EXTI_u8SetSenseCtrl+0x21a>
			case EXTI_u8Falling_EDGE: CLR_BIT(MCUCR, MCUCR_ISC00);  SET_BIT(MCUCR, MCUCR_ISC00); break;
    1aa4:	a5 e5       	ldi	r26, 0x55	; 85
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e5 e5       	ldi	r30, 0x55	; 85
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	8e 7f       	andi	r24, 0xFE	; 254
    1ab0:	8c 93       	st	X, r24
    1ab2:	a5 e5       	ldi	r26, 0x55	; 85
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e5 e5       	ldi	r30, 0x55	; 85
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	81 60       	ori	r24, 0x01	; 1
    1abe:	8c 93       	st	X, r24
    1ac0:	9d c0       	rjmp	.+314    	; 0x1bfc <EXTI_u8SetSenseCtrl+0x21a>
			case EXTI_u8RISING_EDGE: SET_BIT(MCUCR, MCUCR_ISC00);     SET_BIT(MCUCR, MCUCR_ISC00); break;
    1ac2:	a5 e5       	ldi	r26, 0x55	; 85
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e5 e5       	ldi	r30, 0x55	; 85
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	81 60       	ori	r24, 0x01	; 1
    1ace:	8c 93       	st	X, r24
    1ad0:	a5 e5       	ldi	r26, 0x55	; 85
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e5 e5       	ldi	r30, 0x55	; 85
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	81 60       	ori	r24, 0x01	; 1
    1adc:	8c 93       	st	X, r24
    1ade:	8e c0       	rjmp	.+284    	; 0x1bfc <EXTI_u8SetSenseCtrl+0x21a>
			default: Local_u8ErrorState = NOK; break;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	8b c0       	rjmp	.+278    	; 0x1bfc <EXTI_u8SetSenseCtrl+0x21a>
		}
	break;
	case EXTI_u8INT1:
		switch (Copy_u8Sense)
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	3f 83       	std	Y+7, r19	; 0x07
    1aee:	2e 83       	std	Y+6, r18	; 0x06
    1af0:	8e 81       	ldd	r24, Y+6	; 0x06
    1af2:	9f 81       	ldd	r25, Y+7	; 0x07
    1af4:	82 30       	cpi	r24, 0x02	; 2
    1af6:	91 05       	cpc	r25, r1
    1af8:	29 f1       	breq	.+74     	; 0x1b44 <EXTI_u8SetSenseCtrl+0x162>
    1afa:	2e 81       	ldd	r18, Y+6	; 0x06
    1afc:	3f 81       	ldd	r19, Y+7	; 0x07
    1afe:	23 30       	cpi	r18, 0x03	; 3
    1b00:	31 05       	cpc	r19, r1
    1b02:	34 f4       	brge	.+12     	; 0x1b10 <EXTI_u8SetSenseCtrl+0x12e>
    1b04:	8e 81       	ldd	r24, Y+6	; 0x06
    1b06:	9f 81       	ldd	r25, Y+7	; 0x07
    1b08:	81 30       	cpi	r24, 0x01	; 1
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	61 f0       	breq	.+24     	; 0x1b26 <EXTI_u8SetSenseCtrl+0x144>
    1b0e:	76 c0       	rjmp	.+236    	; 0x1bfc <EXTI_u8SetSenseCtrl+0x21a>
    1b10:	2e 81       	ldd	r18, Y+6	; 0x06
    1b12:	3f 81       	ldd	r19, Y+7	; 0x07
    1b14:	23 30       	cpi	r18, 0x03	; 3
    1b16:	31 05       	cpc	r19, r1
    1b18:	99 f1       	breq	.+102    	; 0x1b80 <EXTI_u8SetSenseCtrl+0x19e>
    1b1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b1e:	84 30       	cpi	r24, 0x04	; 4
    1b20:	91 05       	cpc	r25, r1
    1b22:	f9 f0       	breq	.+62     	; 0x1b62 <EXTI_u8SetSenseCtrl+0x180>
    1b24:	6b c0       	rjmp	.+214    	; 0x1bfc <EXTI_u8SetSenseCtrl+0x21a>
		{
			case EXTI_u8LOW_LEVEL: CLR_BIT(MCUCR, MCUCR_ISC10);  CLR_BIT(MCUCR, MCUCR_ISC11); break;
    1b26:	a5 e5       	ldi	r26, 0x55	; 85
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e5 e5       	ldi	r30, 0x55	; 85
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	8b 7f       	andi	r24, 0xFB	; 251
    1b32:	8c 93       	st	X, r24
    1b34:	a5 e5       	ldi	r26, 0x55	; 85
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e5 e5       	ldi	r30, 0x55	; 85
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	87 7f       	andi	r24, 0xF7	; 247
    1b40:	8c 93       	st	X, r24
    1b42:	5c c0       	rjmp	.+184    	; 0x1bfc <EXTI_u8SetSenseCtrl+0x21a>
			case EXTI_u8ON_CHANGE: SET_BIT(MCUCR, MCUCR_ISC10);  CLR_BIT(MCUCR, MCUCR_ISC11); break;
    1b44:	a5 e5       	ldi	r26, 0x55	; 85
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e5 e5       	ldi	r30, 0x55	; 85
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	84 60       	ori	r24, 0x04	; 4
    1b50:	8c 93       	st	X, r24
    1b52:	a5 e5       	ldi	r26, 0x55	; 85
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e5 e5       	ldi	r30, 0x55	; 85
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	87 7f       	andi	r24, 0xF7	; 247
    1b5e:	8c 93       	st	X, r24
    1b60:	4d c0       	rjmp	.+154    	; 0x1bfc <EXTI_u8SetSenseCtrl+0x21a>
			case EXTI_u8Falling_EDGE: CLR_BIT(MCUCR, MCUCR_ISC10);  SET_BIT(MCUCR, MCUCR_ISC11); break;
    1b62:	a5 e5       	ldi	r26, 0x55	; 85
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e5 e5       	ldi	r30, 0x55	; 85
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8b 7f       	andi	r24, 0xFB	; 251
    1b6e:	8c 93       	st	X, r24
    1b70:	a5 e5       	ldi	r26, 0x55	; 85
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e5 e5       	ldi	r30, 0x55	; 85
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	88 60       	ori	r24, 0x08	; 8
    1b7c:	8c 93       	st	X, r24
    1b7e:	3e c0       	rjmp	.+124    	; 0x1bfc <EXTI_u8SetSenseCtrl+0x21a>
			case EXTI_u8RISING_EDGE: SET_BIT(MCUCR, MCUCR_ISC10);  SET_BIT(MCUCR, MCUCR_ISC11); break;
    1b80:	a5 e5       	ldi	r26, 0x55	; 85
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e5 e5       	ldi	r30, 0x55	; 85
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	84 60       	ori	r24, 0x04	; 4
    1b8c:	8c 93       	st	X, r24
    1b8e:	a5 e5       	ldi	r26, 0x55	; 85
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e5 e5       	ldi	r30, 0x55	; 85
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	88 60       	ori	r24, 0x08	; 8
    1b9a:	8c 93       	st	X, r24
    1b9c:	2f c0       	rjmp	.+94     	; 0x1bfc <EXTI_u8SetSenseCtrl+0x21a>
			default:break;
		}
		break;
	case EXTI_u8INT2:
		switch (Copy_u8Sense)
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	3d 83       	std	Y+5, r19	; 0x05
    1ba6:	2c 83       	std	Y+4, r18	; 0x04
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    1baa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	91 05       	cpc	r25, r1
    1bb0:	a1 f0       	breq	.+40     	; 0x1bda <EXTI_u8SetSenseCtrl+0x1f8>
    1bb2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb6:	24 30       	cpi	r18, 0x04	; 4
    1bb8:	31 05       	cpc	r19, r1
    1bba:	01 f5       	brne	.+64     	; 0x1bfc <EXTI_u8SetSenseCtrl+0x21a>
		{
			case EXTI_u8Falling_EDGE: CLR_BIT(MCUCR, MCUCR_ISC2);  SET_BIT(MCUCR, MCUCR_ISC2); break;
    1bbc:	a5 e5       	ldi	r26, 0x55	; 85
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e5 e5       	ldi	r30, 0x55	; 85
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	8f 7b       	andi	r24, 0xBF	; 191
    1bc8:	8c 93       	st	X, r24
    1bca:	a5 e5       	ldi	r26, 0x55	; 85
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e5 e5       	ldi	r30, 0x55	; 85
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 64       	ori	r24, 0x40	; 64
    1bd6:	8c 93       	st	X, r24
    1bd8:	11 c0       	rjmp	.+34     	; 0x1bfc <EXTI_u8SetSenseCtrl+0x21a>
			case EXTI_u8LOW_LEVEL: SET_BIT(MCUCR, MCUCR_ISC2);  SET_BIT(MCUCR, MCUCR_ISC2); break;
    1bda:	a5 e5       	ldi	r26, 0x55	; 85
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e5 e5       	ldi	r30, 0x55	; 85
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	80 64       	ori	r24, 0x40	; 64
    1be6:	8c 93       	st	X, r24
    1be8:	a5 e5       	ldi	r26, 0x55	; 85
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e5 e5       	ldi	r30, 0x55	; 85
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	80 64       	ori	r24, 0x40	; 64
    1bf4:	8c 93       	st	X, r24
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <EXTI_u8SetSenseCtrl+0x21a>
			default:break;
		}
		break;
		default:Local_u8ErrorState = NOK;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return Local_u8ErrorState;
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bfe:	2b 96       	adiw	r28, 0x0b	; 11
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	08 95       	ret

00001c10 <EXTI_u8InterputStatus>:
uint8 EXTI_u8InterputStatus(uint8 Copy_u8IntNum, uint8 Copy_u8Status)
{
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	29 97       	sbiw	r28, 0x09	; 9
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	8a 83       	std	Y+2, r24	; 0x02
    1c26:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1c28:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8IntNum == EXTI_u8INT0)
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	88 23       	and	r24, r24
    1c2e:	01 f5       	brne	.+64     	; 0x1c70 <EXTI_u8InterputStatus+0x60>
	{
		switch (Copy_u8Status)
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	39 87       	std	Y+9, r19	; 0x09
    1c38:	28 87       	std	Y+8, r18	; 0x08
    1c3a:	88 85       	ldd	r24, Y+8	; 0x08
    1c3c:	99 85       	ldd	r25, Y+9	; 0x09
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	91 05       	cpc	r25, r1
    1c42:	71 f0       	breq	.+28     	; 0x1c60 <EXTI_u8InterputStatus+0x50>
    1c44:	28 85       	ldd	r18, Y+8	; 0x08
    1c46:	39 85       	ldd	r19, Y+9	; 0x09
    1c48:	22 30       	cpi	r18, 0x02	; 2
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <EXTI_u8InterputStatus+0x40>
    1c4e:	56 c0       	rjmp	.+172    	; 0x1cfc <EXTI_u8InterputStatus+0xec>
		{
		case ENABLE: SET_BIT(GICR, GICR_INIT0);
    1c50:	ab e5       	ldi	r26, 0x5B	; 91
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	eb e5       	ldi	r30, 0x5B	; 91
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	80 64       	ori	r24, 0x40	; 64
    1c5c:	8c 93       	st	X, r24
    1c5e:	4e c0       	rjmp	.+156    	; 0x1cfc <EXTI_u8InterputStatus+0xec>
			break;
		case DISABLE: CLR_BIT(GICR, GICR_INIT0);
    1c60:	ab e5       	ldi	r26, 0x5B	; 91
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	eb e5       	ldi	r30, 0x5B	; 91
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	8f 7b       	andi	r24, 0xBF	; 191
    1c6c:	8c 93       	st	X, r24
    1c6e:	46 c0       	rjmp	.+140    	; 0x1cfc <EXTI_u8InterputStatus+0xec>
			break;
		}
	}
	else if (Copy_u8IntNum == EXTI_u8INT1)
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	f9 f4       	brne	.+62     	; 0x1cb4 <EXTI_u8InterputStatus+0xa4>
	{
		switch (Copy_u8Status)
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	3f 83       	std	Y+7, r19	; 0x07
    1c7e:	2e 83       	std	Y+6, r18	; 0x06
    1c80:	8e 81       	ldd	r24, Y+6	; 0x06
    1c82:	9f 81       	ldd	r25, Y+7	; 0x07
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	91 05       	cpc	r25, r1
    1c88:	69 f0       	breq	.+26     	; 0x1ca4 <EXTI_u8InterputStatus+0x94>
    1c8a:	2e 81       	ldd	r18, Y+6	; 0x06
    1c8c:	3f 81       	ldd	r19, Y+7	; 0x07
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	a1 f5       	brne	.+104    	; 0x1cfc <EXTI_u8InterputStatus+0xec>
		{
		case ENABLE: SET_BIT(GICR, GICR_INIT1);
    1c94:	ab e5       	ldi	r26, 0x5B	; 91
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	eb e5       	ldi	r30, 0x5B	; 91
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	80 68       	ori	r24, 0x80	; 128
    1ca0:	8c 93       	st	X, r24
    1ca2:	2c c0       	rjmp	.+88     	; 0x1cfc <EXTI_u8InterputStatus+0xec>
			break;
		case DISABLE: CLR_BIT(GICR, GICR_INIT1);
    1ca4:	ab e5       	ldi	r26, 0x5B	; 91
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	eb e5       	ldi	r30, 0x5B	; 91
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	8f 77       	andi	r24, 0x7F	; 127
    1cb0:	8c 93       	st	X, r24
    1cb2:	24 c0       	rjmp	.+72     	; 0x1cfc <EXTI_u8InterputStatus+0xec>
			break;
		default:
			break;
		}
	}
	else if (Copy_u8IntNum == EXTI_u8INT2)
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	82 30       	cpi	r24, 0x02	; 2
    1cb8:	f9 f4       	brne	.+62     	; 0x1cf8 <EXTI_u8InterputStatus+0xe8>
	{
		switch (Copy_u8Status)
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	3d 83       	std	Y+5, r19	; 0x05
    1cc2:	2c 83       	std	Y+4, r18	; 0x04
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	91 05       	cpc	r25, r1
    1ccc:	69 f0       	breq	.+26     	; 0x1ce8 <EXTI_u8InterputStatus+0xd8>
    1cce:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd2:	22 30       	cpi	r18, 0x02	; 2
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	91 f4       	brne	.+36     	; 0x1cfc <EXTI_u8InterputStatus+0xec>
		{
		case ENABLE: SET_BIT(GICR, GICR_INIT2);
    1cd8:	ab e5       	ldi	r26, 0x5B	; 91
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	eb e5       	ldi	r30, 0x5B	; 91
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	80 62       	ori	r24, 0x20	; 32
    1ce4:	8c 93       	st	X, r24
    1ce6:	0a c0       	rjmp	.+20     	; 0x1cfc <EXTI_u8InterputStatus+0xec>
			break;
		case DISABLE: CLR_BIT(GICR, GICR_INIT2);
    1ce8:	ab e5       	ldi	r26, 0x5B	; 91
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	eb e5       	ldi	r30, 0x5B	; 91
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8f 7d       	andi	r24, 0xDF	; 223
    1cf4:	8c 93       	st	X, r24
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <EXTI_u8InterputStatus+0xec>
		default:
			break;

		}
	}
	else Local_u8ErrorState = NOK;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cfe:	29 96       	adiw	r28, 0x09	; 9
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <EXTI_u8SetCallBack>:

uint8 EXTI_u8SetCallBack(uint8 Copy_u8Num,  void (*Copy_pfFuncPtr)(void))
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <EXTI_u8SetCallBack+0x6>
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <EXTI_u8SetCallBack+0x8>
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	8a 83       	std	Y+2, r24	; 0x02
    1d1e:	7c 83       	std	Y+4, r23	; 0x04
    1d20:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1d22:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pfFuncPtr != NULL)
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	9c 81       	ldd	r25, Y+4	; 0x04
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	69 f0       	breq	.+26     	; 0x1d46 <EXTI_u8SetCallBack+0x36>
	{
		EXTI_pfINTFuncPtr[Copy_u8Num] = Copy_pfFuncPtr;
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	88 2f       	mov	r24, r24
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	fc 01       	movw	r30, r24
    1d38:	e8 50       	subi	r30, 0x08	; 8
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	80 83       	st	Z, r24
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <EXTI_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NOK;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <__vector_1>:


void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    1d5a:	1f 92       	push	r1
    1d5c:	0f 92       	push	r0
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	0f 92       	push	r0
    1d62:	11 24       	eor	r1, r1
    1d64:	2f 93       	push	r18
    1d66:	3f 93       	push	r19
    1d68:	4f 93       	push	r20
    1d6a:	5f 93       	push	r21
    1d6c:	6f 93       	push	r22
    1d6e:	7f 93       	push	r23
    1d70:	8f 93       	push	r24
    1d72:	9f 93       	push	r25
    1d74:	af 93       	push	r26
    1d76:	bf 93       	push	r27
    1d78:	ef 93       	push	r30
    1d7a:	ff 93       	push	r31
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pfINTFuncPtr[EXTI_u8INT0] != NULL)
    1d84:	80 91 f8 00 	lds	r24, 0x00F8
    1d88:	90 91 f9 00 	lds	r25, 0x00F9
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	29 f0       	breq	.+10     	; 0x1d9a <__vector_1+0x40>
	{
		EXTI_pfINTFuncPtr[EXTI_u8INT0]();
    1d90:	e0 91 f8 00 	lds	r30, 0x00F8
    1d94:	f0 91 f9 00 	lds	r31, 0x00F9
    1d98:	09 95       	icall
	}
}
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	ff 91       	pop	r31
    1da0:	ef 91       	pop	r30
    1da2:	bf 91       	pop	r27
    1da4:	af 91       	pop	r26
    1da6:	9f 91       	pop	r25
    1da8:	8f 91       	pop	r24
    1daa:	7f 91       	pop	r23
    1dac:	6f 91       	pop	r22
    1dae:	5f 91       	pop	r21
    1db0:	4f 91       	pop	r20
    1db2:	3f 91       	pop	r19
    1db4:	2f 91       	pop	r18
    1db6:	0f 90       	pop	r0
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	0f 90       	pop	r0
    1dbc:	1f 90       	pop	r1
    1dbe:	18 95       	reti

00001dc0 <__vector_2>:
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    1dc0:	1f 92       	push	r1
    1dc2:	0f 92       	push	r0
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	0f 92       	push	r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	2f 93       	push	r18
    1dcc:	3f 93       	push	r19
    1dce:	4f 93       	push	r20
    1dd0:	5f 93       	push	r21
    1dd2:	6f 93       	push	r22
    1dd4:	7f 93       	push	r23
    1dd6:	8f 93       	push	r24
    1dd8:	9f 93       	push	r25
    1dda:	af 93       	push	r26
    1ddc:	bf 93       	push	r27
    1dde:	ef 93       	push	r30
    1de0:	ff 93       	push	r31
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pfINTFuncPtr[EXTI_u8INT1] != NULL)
    1dea:	80 91 fa 00 	lds	r24, 0x00FA
    1dee:	90 91 fb 00 	lds	r25, 0x00FB
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	29 f0       	breq	.+10     	; 0x1e00 <__vector_2+0x40>
	{
		EXTI_pfINTFuncPtr[EXTI_u8INT1]();
    1df6:	e0 91 fa 00 	lds	r30, 0x00FA
    1dfa:	f0 91 fb 00 	lds	r31, 0x00FB
    1dfe:	09 95       	icall
	}
}
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	ff 91       	pop	r31
    1e06:	ef 91       	pop	r30
    1e08:	bf 91       	pop	r27
    1e0a:	af 91       	pop	r26
    1e0c:	9f 91       	pop	r25
    1e0e:	8f 91       	pop	r24
    1e10:	7f 91       	pop	r23
    1e12:	6f 91       	pop	r22
    1e14:	5f 91       	pop	r21
    1e16:	4f 91       	pop	r20
    1e18:	3f 91       	pop	r19
    1e1a:	2f 91       	pop	r18
    1e1c:	0f 90       	pop	r0
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	0f 90       	pop	r0
    1e22:	1f 90       	pop	r1
    1e24:	18 95       	reti

00001e26 <__vector_3>:
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    1e26:	1f 92       	push	r1
    1e28:	0f 92       	push	r0
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	0f 92       	push	r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	2f 93       	push	r18
    1e32:	3f 93       	push	r19
    1e34:	4f 93       	push	r20
    1e36:	5f 93       	push	r21
    1e38:	6f 93       	push	r22
    1e3a:	7f 93       	push	r23
    1e3c:	8f 93       	push	r24
    1e3e:	9f 93       	push	r25
    1e40:	af 93       	push	r26
    1e42:	bf 93       	push	r27
    1e44:	ef 93       	push	r30
    1e46:	ff 93       	push	r31
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pfINTFuncPtr[EXTI_u8INT2] != NULL)
    1e50:	80 91 fc 00 	lds	r24, 0x00FC
    1e54:	90 91 fd 00 	lds	r25, 0x00FD
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	29 f0       	breq	.+10     	; 0x1e66 <__vector_3+0x40>
	{
		EXTI_pfINTFuncPtr[EXTI_u8INT2]();
    1e5c:	e0 91 fc 00 	lds	r30, 0x00FC
    1e60:	f0 91 fd 00 	lds	r31, 0x00FD
    1e64:	09 95       	icall
	}
}
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	ff 91       	pop	r31
    1e6c:	ef 91       	pop	r30
    1e6e:	bf 91       	pop	r27
    1e70:	af 91       	pop	r26
    1e72:	9f 91       	pop	r25
    1e74:	8f 91       	pop	r24
    1e76:	7f 91       	pop	r23
    1e78:	6f 91       	pop	r22
    1e7a:	5f 91       	pop	r21
    1e7c:	4f 91       	pop	r20
    1e7e:	3f 91       	pop	r19
    1e80:	2f 91       	pop	r18
    1e82:	0f 90       	pop	r0
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	0f 90       	pop	r0
    1e88:	1f 90       	pop	r1
    1e8a:	18 95       	reti

00001e8c <GIE_voidEnableglobal>:
#include "GIE_interface.h"
#include "GIE_reg.h"


void GIE_voidEnableglobal(void)
{
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
	/*  SET_BIT(SREG, SREG_I);  */

	__asm __volatile("SEI"); /*Inline assembly instruction to set 1 bit*/
    1e94:	78 94       	sei
}
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <GIE_voidDisableglobal>:




void GIE_voidDisableglobal(void)
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
	/*  CLR_BIT(SREG, SREG_I); */

	__asm __volatile("CLI"); /*Inline assembly instruction to clear 1 bit*/
    1ea4:	f8 94       	cli
}
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <KPD_u8GetPressedKey>:
#include "KPD_interface.h"
#include "KPD_private.h"

/*required All row pins are input pulledup, all colum pins are output high*/
uint8 KPD_u8GetPressedKey(void)
{
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <KPD_u8GetPressedKey+0x6>
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <KPD_u8GetPressedKey+0x8>
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8PressedKey = KPD_u8NO_Pressed_KEY_VAL;
    1eba:	8f ef       	ldi	r24, 0xFF	; 255
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
	static uint8 Local_u8ColArr[KPD_u8COL_NUM] = {KPD_u8COL1_PIN, KPD_u8COL2_PIN, KPD_u8COL3_PIN, KPD_u8COL4_PIN};
	static uint8 Local_u8ROWArr[KPD_u8ROW_NUM] = {KPD_u8ROW1_PIN, KPD_u8ROW2_PIN, KPD_u8ROW3_PIN, KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_u8ROW_NUM][KPD_u8COL_NUM] = KPD_u8BUTTON_ARR;

	/*Activate column pins and read the rows*/
	for(Local_u8ColCounter = 0; Local_u8ColCounter < KPD_u8COL_NUM; Local_u8ColCounter++)
    1ebe:	19 82       	std	Y+1, r1	; 0x01
    1ec0:	5e c0       	rjmp	.+188    	; 0x1f7e <KPD_u8GetPressedKey+0xd2>
	{
		/*Activate Current Colulum*/
		DIO_u8SetPinValue(KPD_u8COL_PORT, Local_u8ColArr[Local_u8ColCounter], DIO_u8PIN_LOW);
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	fc 01       	movw	r30, r24
    1eca:	ec 50       	subi	r30, 0x0C	; 12
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	90 81       	ld	r25, Z
    1ed0:	83 e0       	ldi	r24, 0x03	; 3
    1ed2:	69 2f       	mov	r22, r25
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <DIO_u8SetPinValue>
		for(Local_u8RowCounter = 0; Local_u8RowCounter < KPD_u8ROW_NUM; Local_u8RowCounter++)
    1eda:	1a 82       	std	Y+2, r1	; 0x02
    1edc:	3d c0       	rjmp	.+122    	; 0x1f58 <KPD_u8GetPressedKey+0xac>
		{
			/*Readt the current row*/
			DIO_u8GetPinValue(KPD_u8ROW_PORT, Local_u8ROWArr[Local_u8RowCounter], &Local_u8KeyState);
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	88 2f       	mov	r24, r24
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	e0 51       	subi	r30, 0x10	; 16
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	90 81       	ld	r25, Z
    1eec:	9e 01       	movw	r18, r28
    1eee:	2c 5f       	subi	r18, 0xFC	; 252
    1ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	69 2f       	mov	r22, r25
    1ef6:	a9 01       	movw	r20, r18
    1ef8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_u8GetPinValue>

			/*if current row is low, button is pressed*/
			if(Local_u8KeyState == DIO_u8PIN_LOW)
    1efc:	8c 81       	ldd	r24, Y+4	; 0x04
    1efe:	88 23       	and	r24, r24
    1f00:	41 f5       	brne	.+80     	; 0x1f52 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	48 2f       	mov	r20, r24
    1f06:	50 e0       	ldi	r21, 0x00	; 0
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	ca 01       	movw	r24, r20
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	82 0f       	add	r24, r18
    1f1a:	93 1f       	adc	r25, r19
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	e0 52       	subi	r30, 0x20	; 32
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	80 81       	ld	r24, Z
    1f24:	8b 83       	std	Y+3, r24	; 0x03
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <KPD_u8GetPressedKey+0x9a>
				/*wait until key is released*/
				while(Local_u8KeyState == DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_u8ROW_PORT, Local_u8ROWArr[Local_u8RowCounter], &Local_u8KeyState);
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	fc 01       	movw	r30, r24
    1f30:	e0 51       	subi	r30, 0x10	; 16
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	90 81       	ld	r25, Z
    1f36:	9e 01       	movw	r18, r28
    1f38:	2c 5f       	subi	r18, 0xFC	; 252
    1f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	69 2f       	mov	r22, r25
    1f40:	a9 01       	movw	r20, r18
    1f42:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <DIO_u8GetPinValue>
			/*if current row is low, button is pressed*/
			if(Local_u8KeyState == DIO_u8PIN_LOW)
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
				/*wait until key is released*/
				while(Local_u8KeyState == DIO_u8PIN_LOW)
    1f46:	8c 81       	ldd	r24, Y+4	; 0x04
    1f48:	88 23       	and	r24, r24
    1f4a:	71 f3       	breq	.-36     	; 0x1f28 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_u8ROW_PORT, Local_u8ROWArr[Local_u8RowCounter], &Local_u8KeyState);
				}

				return Local_u8PressedKey;
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
    1f50:	1c c0       	rjmp	.+56     	; 0x1f8a <KPD_u8GetPressedKey+0xde>
	/*Activate column pins and read the rows*/
	for(Local_u8ColCounter = 0; Local_u8ColCounter < KPD_u8COL_NUM; Local_u8ColCounter++)
	{
		/*Activate Current Colulum*/
		DIO_u8SetPinValue(KPD_u8COL_PORT, Local_u8ColArr[Local_u8ColCounter], DIO_u8PIN_LOW);
		for(Local_u8RowCounter = 0; Local_u8RowCounter < KPD_u8ROW_NUM; Local_u8RowCounter++)
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	8f 5f       	subi	r24, 0xFF	; 255
    1f56:	8a 83       	std	Y+2, r24	; 0x02
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	84 30       	cpi	r24, 0x04	; 4
    1f5c:	08 f4       	brcc	.+2      	; 0x1f60 <KPD_u8GetPressedKey+0xb4>
    1f5e:	bf cf       	rjmp	.-130    	; 0x1ede <KPD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}

		}
		/*Deactivate the current column*/
		DIO_u8SetPinValue(KPD_u8COL_PORT, Local_u8ColArr[Local_u8ColCounter], DIO_u8PIN_HIGH);
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	88 2f       	mov	r24, r24
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	fc 01       	movw	r30, r24
    1f68:	ec 50       	subi	r30, 0x0C	; 12
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	90 81       	ld	r25, Z
    1f6e:	83 e0       	ldi	r24, 0x03	; 3
    1f70:	69 2f       	mov	r22, r25
    1f72:	41 e0       	ldi	r20, 0x01	; 1
    1f74:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <DIO_u8SetPinValue>
	static uint8 Local_u8ColArr[KPD_u8COL_NUM] = {KPD_u8COL1_PIN, KPD_u8COL2_PIN, KPD_u8COL3_PIN, KPD_u8COL4_PIN};
	static uint8 Local_u8ROWArr[KPD_u8ROW_NUM] = {KPD_u8ROW1_PIN, KPD_u8ROW2_PIN, KPD_u8ROW3_PIN, KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_u8ROW_NUM][KPD_u8COL_NUM] = KPD_u8BUTTON_ARR;

	/*Activate column pins and read the rows*/
	for(Local_u8ColCounter = 0; Local_u8ColCounter < KPD_u8COL_NUM; Local_u8ColCounter++)
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	8f 5f       	subi	r24, 0xFF	; 255
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	84 30       	cpi	r24, 0x04	; 4
    1f82:	08 f4       	brcc	.+2      	; 0x1f86 <KPD_u8GetPressedKey+0xda>
    1f84:	9e cf       	rjmp	.-196    	; 0x1ec2 <KPD_u8GetPressedKey+0x16>

		}
		/*Deactivate the current column*/
		DIO_u8SetPinValue(KPD_u8COL_PORT, Local_u8ColArr[Local_u8ColCounter], DIO_u8PIN_HIGH);
	}
	return Local_u8PressedKey;
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	8d 83       	std	Y+5, r24	; 0x05
    1f8a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <LDR_u16GetAnalogVolt>:
#include "STD_TYPES.h"
#include "LDR.h"


uint16 LDR_u16GetAnalogVolt(uint8 ADC_u8GetChannelReading)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	0f 92       	push	r0
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	89 83       	std	Y+1, r24	; 0x01


    #if ADC_u8RESOLUTION == EIGHT_BITS

         return (uint16)(((uint32)ADC_u8GetChannelReading * 5000UL) / 256UL);
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a0 e0       	ldi	r26, 0x00	; 0
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	28 e8       	ldi	r18, 0x88	; 136
    1fb4:	33 e1       	ldi	r19, 0x13	; 19
    1fb6:	40 e0       	ldi	r20, 0x00	; 0
    1fb8:	50 e0       	ldi	r21, 0x00	; 0
    1fba:	bc 01       	movw	r22, r24
    1fbc:	cd 01       	movw	r24, r26
    1fbe:	0e 94 8a 19 	call	0x3314	; 0x3314 <__mulsi3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	89 2f       	mov	r24, r25
    1fc8:	9a 2f       	mov	r25, r26
    1fca:	ab 2f       	mov	r26, r27
    1fcc:	bb 27       	eor	r27, r27
        #error Wrong ADC_u8RESOLUTION confegration option 

    #endif


}
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <Map>:

#include "STD_TYPES.h"
#include "MAP.h"

sint32 Map(sint32 InputMin,sint32 InputMax,sint32 OutputMin,sint32 OutputMax,sint32 InputValue)
{
    1fd6:	af 92       	push	r10
    1fd8:	bf 92       	push	r11
    1fda:	cf 92       	push	r12
    1fdc:	df 92       	push	r13
    1fde:	ef 92       	push	r14
    1fe0:	ff 92       	push	r15
    1fe2:	0f 93       	push	r16
    1fe4:	1f 93       	push	r17
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	60 97       	sbiw	r28, 0x10	; 16
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	69 83       	std	Y+1, r22	; 0x01
    1ffc:	7a 83       	std	Y+2, r23	; 0x02
    1ffe:	8b 83       	std	Y+3, r24	; 0x03
    2000:	9c 83       	std	Y+4, r25	; 0x04
    2002:	2d 83       	std	Y+5, r18	; 0x05
    2004:	3e 83       	std	Y+6, r19	; 0x06
    2006:	4f 83       	std	Y+7, r20	; 0x07
    2008:	58 87       	std	Y+8, r21	; 0x08
    200a:	e9 86       	std	Y+9, r14	; 0x09
    200c:	fa 86       	std	Y+10, r15	; 0x0a
    200e:	0b 87       	std	Y+11, r16	; 0x0b
    2010:	1c 87       	std	Y+12, r17	; 0x0c
    2012:	ad 86       	std	Y+13, r10	; 0x0d
    2014:	be 86       	std	Y+14, r11	; 0x0e
    2016:	cf 86       	std	Y+15, r12	; 0x0f
    2018:	d8 8a       	std	Y+16, r13	; 0x10

    return (((OutputMax - OutputMin) * (InputValue - InputMin)) / (InputMax - InputMin)) + OutputMin ;
    201a:	2d 85       	ldd	r18, Y+13	; 0x0d
    201c:	3e 85       	ldd	r19, Y+14	; 0x0e
    201e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2020:	58 89       	ldd	r21, Y+16	; 0x10
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	ab 85       	ldd	r26, Y+11	; 0x0b
    2028:	bc 85       	ldd	r27, Y+12	; 0x0c
    202a:	79 01       	movw	r14, r18
    202c:	8a 01       	movw	r16, r20
    202e:	e8 1a       	sub	r14, r24
    2030:	f9 0a       	sbc	r15, r25
    2032:	0a 0b       	sbc	r16, r26
    2034:	1b 0b       	sbc	r17, r27
    2036:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2038:	3e 8d       	ldd	r19, Y+30	; 0x1e
    203a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    203c:	58 a1       	ldd	r21, Y+32	; 0x20
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	ab 81       	ldd	r26, Y+3	; 0x03
    2044:	bc 81       	ldd	r27, Y+4	; 0x04
    2046:	28 1b       	sub	r18, r24
    2048:	39 0b       	sbc	r19, r25
    204a:	4a 0b       	sbc	r20, r26
    204c:	5b 0b       	sbc	r21, r27
    204e:	c8 01       	movw	r24, r16
    2050:	b7 01       	movw	r22, r14
    2052:	0e 94 8a 19 	call	0x3314	; 0x3314 <__mulsi3>
    2056:	7b 01       	movw	r14, r22
    2058:	8c 01       	movw	r16, r24
    205a:	2d 81       	ldd	r18, Y+5	; 0x05
    205c:	3e 81       	ldd	r19, Y+6	; 0x06
    205e:	4f 81       	ldd	r20, Y+7	; 0x07
    2060:	58 85       	ldd	r21, Y+8	; 0x08
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	9a 81       	ldd	r25, Y+2	; 0x02
    2066:	ab 81       	ldd	r26, Y+3	; 0x03
    2068:	bc 81       	ldd	r27, Y+4	; 0x04
    206a:	28 1b       	sub	r18, r24
    206c:	39 0b       	sbc	r19, r25
    206e:	4a 0b       	sbc	r20, r26
    2070:	5b 0b       	sbc	r21, r27
    2072:	c8 01       	movw	r24, r16
    2074:	b7 01       	movw	r22, r14
    2076:	0e 94 b5 19 	call	0x336a	; 0x336a <__divmodsi4>
    207a:	da 01       	movw	r26, r20
    207c:	c9 01       	movw	r24, r18
    207e:	9c 01       	movw	r18, r24
    2080:	ad 01       	movw	r20, r26
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	ab 85       	ldd	r26, Y+11	; 0x0b
    2088:	bc 85       	ldd	r27, Y+12	; 0x0c
    208a:	82 0f       	add	r24, r18
    208c:	93 1f       	adc	r25, r19
    208e:	a4 1f       	adc	r26, r20
    2090:	b5 1f       	adc	r27, r21
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	60 96       	adiw	r28, 0x10	; 16
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	1f 91       	pop	r17
    20a8:	0f 91       	pop	r16
    20aa:	ff 90       	pop	r15
    20ac:	ef 90       	pop	r14
    20ae:	df 90       	pop	r13
    20b0:	cf 90       	pop	r12
    20b2:	bf 90       	pop	r11
    20b4:	af 90       	pop	r10
    20b6:	08 95       	ret

000020b8 <PORT_voidInit>:
#include "PORT_interface.h"
#include "PORT_cfg.h"
#include "PORT_private.h"

void PORT_voidInit(void)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    20c0:	ea e3       	ldi	r30, 0x3A	; 58
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	8e e7       	ldi	r24, 0x7E	; 126
    20c6:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    20c8:	e7 e3       	ldi	r30, 0x37	; 55
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	89 e0       	ldi	r24, 0x09	; 9
    20ce:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    20d0:	e4 e3       	ldi	r30, 0x34	; 52
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	8f ef       	ldi	r24, 0xFF	; 255
    20d6:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    20d8:	e1 e3       	ldi	r30, 0x31	; 49
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	8e e3       	ldi	r24, 0x3E	; 62
    20de:	80 83       	st	Z, r24

	PORTA = PORTA_INIT_VAL;
    20e0:	eb e3       	ldi	r30, 0x3B	; 59
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VAL;
    20e6:	e8 e3       	ldi	r30, 0x38	; 56
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 ef       	ldi	r24, 0xF0	; 240
    20ec:	80 83       	st	Z, r24
	PORTC = PORTC_INIT_VAL;
    20ee:	e5 e3       	ldi	r30, 0x35	; 53
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	10 82       	st	Z, r1
	PORTD = PORTD_INIT_VAL;
    20f4:	e2 e3       	ldi	r30, 0x32	; 50
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	8c e3       	ldi	r24, 0x3C	; 60
    20fa:	80 83       	st	Z, r24
}
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <TIMER1_voidInit>:
static void (* TIMERS_pvCallBackFuncArr [8])(void) = {NULL} ;



void TIMER1_voidInit(void)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    /* Conigure fast pwm mode */

    SET_BIT(TCCR1A,TCCR1A_COM1A1);
    210a:	af e4       	ldi	r26, 0x4F	; 79
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	ef e4       	ldi	r30, 0x4F	; 79
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	80 68       	ori	r24, 0x80	; 128
    2116:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2118:	af e4       	ldi	r26, 0x4F	; 79
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	ef e4       	ldi	r30, 0x4F	; 79
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	8f 7b       	andi	r24, 0xBF	; 191
    2124:	8c 93       	st	X, r24


    /* configure waveform generation mode */

    CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2126:	af e4       	ldi	r26, 0x4F	; 79
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	ef e4       	ldi	r30, 0x4F	; 79
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	8e 7f       	andi	r24, 0xFE	; 254
    2132:	8c 93       	st	X, r24
    SET_BIT(TCCR1A,TCCR1A_WGM11);
    2134:	af e4       	ldi	r26, 0x4F	; 79
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	ef e4       	ldi	r30, 0x4F	; 79
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	82 60       	ori	r24, 0x02	; 2
    2140:	8c 93       	st	X, r24
    SET_BIT(TCCR1B,TCCR1B_WGM12);
    2142:	ae e4       	ldi	r26, 0x4E	; 78
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	ee e4       	ldi	r30, 0x4E	; 78
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	88 60       	ori	r24, 0x08	; 8
    214e:	8c 93       	st	X, r24
    SET_BIT(TCCR1B,TCCR1B_WGM13);
    2150:	ae e4       	ldi	r26, 0x4E	; 78
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	ee e4       	ldi	r30, 0x4E	; 78
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	80 61       	ori	r24, 0x10	; 16
    215c:	8c 93       	st	X, r24

    /* configure prescaler */

    TCCR1B &= PRESCALER_MASK ;
    215e:	ae e4       	ldi	r26, 0x4E	; 78
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	ee e4       	ldi	r30, 0x4E	; 78
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	88 7f       	andi	r24, 0xF8	; 248
    216a:	8c 93       	st	X, r24
    TCCR1B |= DIVBY_8;
    216c:	ae e4       	ldi	r26, 0x4E	; 78
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	ee e4       	ldi	r30, 0x4E	; 78
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	82 60       	ori	r24, 0x02	; 2
    2178:	8c 93       	st	X, r24

    /* SET top value */

    ICR1 = TIMER1_TOP_VALUE ;
    217a:	e6 e4       	ldi	r30, 0x46	; 70
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 e4       	ldi	r24, 0x40	; 64
    2180:	9c e9       	ldi	r25, 0x9C	; 156
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	80 83       	st	Z, r24





}
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <TIMER1_voidSetCompValue>:


void TIMER1_voidSetCompValue(uint16 Copy_u16Value)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <TIMER1_voidSetCompValue+0x6>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = Copy_u16Value;
    219a:	ea e4       	ldi	r30, 0x4A	; 74
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	80 83       	st	Z, r24
}
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <TIMER1_voidSetTimerVal>:


void TIMER1_voidSetTimerVal(uint16 Copy_u16Value)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <TIMER1_voidSetTimerVal+0x6>
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    21be:	ec e4       	ldi	r30, 0x4C	; 76
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	80 83       	st	Z, r24
}
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <TIMER1_u16GetTimerVal>:

uint16 TIMER1_u16GetTimerVal(void)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    21dc:	ec e4       	ldi	r30, 0x4C	; 76
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	91 81       	ldd	r25, Z+1	; 0x01
}
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <ICU_voidInit>:

void ICU_voidInit(void)
{
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62



    /* Timer1 Normal mode */

    CLR_BIT(TCCR1A,TCCR1A_WGM10);
    21f2:	af e4       	ldi	r26, 0x4F	; 79
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	ef e4       	ldi	r30, 0x4F	; 79
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	8e 7f       	andi	r24, 0xFE	; 254
    21fe:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2200:	af e4       	ldi	r26, 0x4F	; 79
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	ef e4       	ldi	r30, 0x4F	; 79
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	8d 7f       	andi	r24, 0xFD	; 253
    220c:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,TCCR1B_WGM12);
    220e:	ae e4       	ldi	r26, 0x4E	; 78
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	ee e4       	ldi	r30, 0x4E	; 78
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	87 7f       	andi	r24, 0xF7	; 247
    221a:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B,TCCR1B_WGM13);
    221c:	ae e4       	ldi	r26, 0x4E	; 78
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	ee e4       	ldi	r30, 0x4E	; 78
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	8f 7e       	andi	r24, 0xEF	; 239
    2228:	8c 93       	st	X, r24
   


    /* configure prescaler */

    TCCR1B &= PRESCALER_MASK ;
    222a:	ae e4       	ldi	r26, 0x4E	; 78
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	ee e4       	ldi	r30, 0x4E	; 78
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	88 7f       	andi	r24, 0xF8	; 248
    2236:	8c 93       	st	X, r24
    TCCR1B |= TIMER_CLOCK;
    2238:	ae e4       	ldi	r26, 0x4E	; 78
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	ee e4       	ldi	r30, 0x4E	; 78
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	82 60       	ori	r24, 0x02	; 2
    2244:	8c 93       	st	X, r24
 

#if ICU_u8_TRIGGER_SRC == RISSING_EDGE


    SET_BIT(TCCR1B,TCCR1B_ICES1);
    2246:	ae e4       	ldi	r26, 0x4E	; 78
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	ee e4       	ldi	r30, 0x4E	; 78
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	80 64       	ori	r24, 0x40	; 64
    2252:	8c 93       	st	X, r24
    /* Enable Timer 1 OVF INT*/
   // SET_BIT(TIMSK,TIMSK_TOIE1);


#if ICU_u8_INT_INIT_STATE == ENABLE
    SET_BIT(TIMSK,TIMSK_TICIE1);
    2254:	a9 e5       	ldi	r26, 0x59	; 89
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e9 e5       	ldi	r30, 0x59	; 89
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	80 62       	ori	r24, 0x20	; 32
    2260:	8c 93       	st	X, r24
#else 
#error wrong ICU_u8_INT_INIT_STATE CFG
#endif


}
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <ICU_voidSetTriggerSrc>:


uint8 ICU_voidSetTriggerSrc(uint8 Copy_u8TriggerSrc)
{
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	00 d0       	rcall	.+0      	; 0x226e <ICU_voidSetTriggerSrc+0x6>
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	8a 83       	std	Y+2, r24	; 0x02

    uint8 Local_u8ErrorState = OK ;
    2274:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8TriggerSrc == FALLING_EDGE )
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	81 30       	cpi	r24, 0x01	; 1
    227a:	41 f4       	brne	.+16     	; 0x228c <ICU_voidSetTriggerSrc+0x24>
    {
        CLR_BIT(TCCR1B,TCCR1B_ICES1);
    227c:	ae e4       	ldi	r26, 0x4E	; 78
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	ee e4       	ldi	r30, 0x4E	; 78
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	8f 7b       	andi	r24, 0xBF	; 191
    2288:	8c 93       	st	X, r24
    228a:	0d c0       	rjmp	.+26     	; 0x22a6 <ICU_voidSetTriggerSrc+0x3e>
    }
    else if (Copy_u8TriggerSrc == RISSING_EDGE)
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	82 30       	cpi	r24, 0x02	; 2
    2290:	41 f4       	brne	.+16     	; 0x22a2 <ICU_voidSetTriggerSrc+0x3a>
    {
        SET_BIT(TCCR1B,TCCR1B_ICES1);
    2292:	ae e4       	ldi	r26, 0x4E	; 78
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	ee e4       	ldi	r30, 0x4E	; 78
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	80 64       	ori	r24, 0x40	; 64
    229e:	8c 93       	st	X, r24
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <ICU_voidSetTriggerSrc+0x3e>
    }
    else
    {
        Local_u8ErrorState = NOK;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	89 83       	std	Y+1, r24	; 0x01
    }
    
    return Local_u8ErrorState ;
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	08 95       	ret

000022b2 <ICU_u32GetVal>:

uint32 ICU_u32GetVal(void)
{
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    return (ICR1);
    22ba:	e6 e4       	ldi	r30, 0x46	; 70
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	91 81       	ldd	r25, Z+1	; 0x01
    22c2:	cc 01       	movw	r24, r24
    22c4:	a0 e0       	ldi	r26, 0x00	; 0
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
}
    22c8:	bc 01       	movw	r22, r24
    22ca:	cd 01       	movw	r24, r26
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <ICU_voidIntEnable>:



void ICU_voidIntEnable(void)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62

    SET_BIT(TIMSK,TIMSK_TICIE1);
    22da:	a9 e5       	ldi	r26, 0x59	; 89
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e9 e5       	ldi	r30, 0x59	; 89
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	80 62       	ori	r24, 0x20	; 32
    22e6:	8c 93       	st	X, r24

}
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	08 95       	ret

000022ee <ICU_voidIntDisable>:
void ICU_voidIntDisable(void)
{
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62

    CLR_BIT(TIMSK,TIMSK_TICIE1);
    22f6:	a9 e5       	ldi	r26, 0x59	; 89
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e9 e5       	ldi	r30, 0x59	; 89
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	8f 7d       	andi	r24, 0xDF	; 223
    2302:	8c 93       	st	X, r24
}
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <TIMERS_u8SetCallBack>:


uint8 TIMERS_u8SetCallBack( TIMERS_Int_Src_t Copy_u8TimerIntSource ,  void (* Copy_pvCallBackFunction )(void) )
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	00 d0       	rcall	.+0      	; 0x2310 <TIMERS_u8SetCallBack+0x6>
    2310:	00 d0       	rcall	.+0      	; 0x2312 <TIMERS_u8SetCallBack+0x8>
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	8a 83       	std	Y+2, r24	; 0x02
    2318:	7c 83       	std	Y+4, r23	; 0x04
    231a:	6b 83       	std	Y+3, r22	; 0x03

    uint8 LOCAL_u8ErrorState = OK ;
    231c:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_pvCallBackFunction != NULL)
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	00 97       	sbiw	r24, 0x00	; 0
    2324:	69 f0       	breq	.+26     	; 0x2340 <TIMERS_u8SetCallBack+0x36>
    {
       TIMERS_pvCallBackFuncArr[Copy_u8TimerIntSource]= Copy_pvCallBackFunction ;
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	fc 01       	movw	r30, r24
    2332:	e2 50       	subi	r30, 0x02	; 2
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	9c 81       	ldd	r25, Y+4	; 0x04
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	80 83       	st	Z, r24
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <TIMERS_u8SetCallBack+0x3a>
    }
    else
    {
        LOCAL_u8ErrorState = NOK ;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	89 83       	std	Y+1, r24	; 0x01





    return LOCAL_u8ErrorState ;
    2344:	89 81       	ldd	r24, Y+1	; 0x01

}
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <TIMER0_voidInit>:


void TIMER0_voidInit(void)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62

    /* Waveform generation mode : Fast PWM */

    SET_BIT(TCCR0,TCCR0_WGM00);
    235c:	a3 e5       	ldi	r26, 0x53	; 83
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e3 e5       	ldi	r30, 0x53	; 83
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	80 64       	ori	r24, 0x40	; 64
    2368:	8c 93       	st	X, r24
    SET_BIT(TCCR0,TCCR0_WGM01);
    236a:	a3 e5       	ldi	r26, 0x53	; 83
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e3 e5       	ldi	r30, 0x53	; 83
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	88 60       	ori	r24, 0x08	; 8
    2376:	8c 93       	st	X, r24


    /* Compare match output mode */

    CLR_BIT(TCCR0,TCCR0_COM00);
    2378:	a3 e5       	ldi	r26, 0x53	; 83
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	e3 e5       	ldi	r30, 0x53	; 83
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	8f 7e       	andi	r24, 0xEF	; 239
    2384:	8c 93       	st	X, r24
    SET_BIT(TCCR0,TCCR0_COM01);
    2386:	a3 e5       	ldi	r26, 0x53	; 83
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e3 e5       	ldi	r30, 0x53	; 83
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	80 62       	ori	r24, 0x20	; 32
    2392:	8c 93       	st	X, r24


    /* Set prescaler */

    TCCR0 &= PRESCALER_MASK;
    2394:	a3 e5       	ldi	r26, 0x53	; 83
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e3 e5       	ldi	r30, 0x53	; 83
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	88 7f       	andi	r24, 0xF8	; 248
    23a0:	8c 93       	st	X, r24
    TCCR0 |= TIMER_CLOCK;
    23a2:	a3 e5       	ldi	r26, 0x53	; 83
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e3 e5       	ldi	r30, 0x53	; 83
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	82 60       	ori	r24, 0x02	; 2
    23ae:	8c 93       	st	X, r24
    // SET_BIT(TIMSK,TIMSK_OCIE0);




}
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <TIMER0_voidSetCompValue>:



void TIMER0_voidSetCompValue(uint8 Copy_u8Value)
{
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	0f 92       	push	r0
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = Copy_u8Value ;
    23c2:	ec e5       	ldi	r30, 0x5C	; 92
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	80 83       	st	Z, r24
}
    23ca:	0f 90       	pop	r0
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <UART_voidInit>:

#include "UART_reg.h"


void UART_voidInit(void)
{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	0f 92       	push	r0
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8UCSRCVal = 0u;
    23dc:	19 82       	std	Y+1, r1	; 0x01
	/*enable transmitter receiver*/
	SET_BIT(UCSRB, UCSRB_TXEN);
    23de:	aa e2       	ldi	r26, 0x2A	; 42
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	ea e2       	ldi	r30, 0x2A	; 42
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	88 60       	ori	r24, 0x08	; 8
    23ea:	8c 93       	st	X, r24
	SET_BIT(UCSRB, UCSRB_RXEN);
    23ec:	aa e2       	ldi	r26, 0x2A	; 42
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	ea e2       	ldi	r30, 0x2A	; 42
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	80 61       	ori	r24, 0x10	; 16
    23f8:	8c 93       	st	X, r24

	
	/*Asynch mode*/
	CLR_BIT(Local_u8UCSRCVal, UCSRC_UMSEL);
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	8f 7b       	andi	r24, 0xBF	; 191
    23fe:	89 83       	std	Y+1, r24	; 0x01

	/*Disable parity*/
	CLR_BIT(Local_u8UCSRCVal, UCSRC_UPM1);
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	8f 7d       	andi	r24, 0xDF	; 223
    2404:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCVal, UCSRC_UPM0);
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	8f 7e       	andi	r24, 0xEF	; 239
    240a:	89 83       	std	Y+1, r24	; 0x01

	/*1 Stop bit*/
	CLR_BIT(Local_u8UCSRCVal, UCSRC_USBS);
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	87 7f       	andi	r24, 0xF7	; 247
    2410:	89 83       	std	Y+1, r24	; 0x01


	/*Character size 8 bits*/

	SET_BIT(Local_u8UCSRCVal, UCSRC_UCSZ1);
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	84 60       	ori	r24, 0x04	; 4
    2416:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCVal, UCSRC_UCSZ0);
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	82 60       	ori	r24, 0x02	; 2
    241c:	89 83       	std	Y+1, r24	; 0x01

	/* Register select UCSRC*/
	SET_BIT(Local_u8UCSRCVal,UCSRC_URSEL);
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	80 68       	ori	r24, 0x80	; 128
    2422:	89 83       	std	Y+1, r24	; 0x01



	UCSRC = Local_u8UCSRCVal ;
    2424:	e0 e4       	ldi	r30, 0x40	; 64
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	80 83       	st	Z, r24

	/*Baud Rate = 9600 bps */
	UBRRL = 103u ;
    242c:	e9 e2       	ldi	r30, 0x29	; 41
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	87 e6       	ldi	r24, 0x67	; 103
    2432:	80 83       	st	Z, r24

}
    2434:	0f 90       	pop	r0
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <UART_voidSendData>:

void UART_voidSendData(uint8 Copy_u8Data)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	0f 92       	push	r0
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	89 83       	std	Y+1, r24	; 0x01
	/* Wait until the transmit buffer is ready */

	while((GET_BIT(UCSRA ,UCSRA_UDRE)) == 0)
    2448:	eb e2       	ldi	r30, 0x2B	; 43
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	82 95       	swap	r24
    2450:	86 95       	lsr	r24
    2452:	87 70       	andi	r24, 0x07	; 7
    2454:	88 2f       	mov	r24, r24
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	81 70       	andi	r24, 0x01	; 1
    245a:	90 70       	andi	r25, 0x00	; 0
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	a1 f3       	breq	.-24     	; 0x2448 <UART_voidSendData+0xc>
	{
	}
	UDR = Copy_u8Data;
    2460:	ec e2       	ldi	r30, 0x2C	; 44
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	80 83       	st	Z, r24

}
    2468:	0f 90       	pop	r0
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <UART_voidReceiveData>:


uint8 UART_voidReceiveData(void)
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
	/* Wait until the Recieve  buffer is ready */

	while((GET_BIT(UCSRA ,UCSRA_RXC)) == 0)
    2478:	eb e2       	ldi	r30, 0x2B	; 43
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	88 23       	and	r24, r24
    2480:	dc f7       	brge	.-10     	; 0x2478 <UART_voidReceiveData+0x8>
	{
	}
	return UDR;
    2482:	ec e2       	ldi	r30, 0x2C	; 44
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z

}
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <UART_u8SendString>:




uint8 UART_u8SendString(uint8 * Copy_pu8String)
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	00 d0       	rcall	.+0      	; 0x2494 <UART_u8SendString+0x6>
    2494:	00 d0       	rcall	.+0      	; 0x2496 <UART_u8SendString+0x8>
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	9c 83       	std	Y+4, r25	; 0x04
    249c:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState= OK ;
    249e:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8String != NULL)
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	9c 81       	ldd	r25, Y+4	; 0x04
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	e1 f0       	breq	.+56     	; 0x24e0 <UART_u8SendString+0x52>
	{
		uint8 Local_u8Counter = 0 ;
    24a8:	19 82       	std	Y+1, r1	; 0x01
    24aa:	0e c0       	rjmp	.+28     	; 0x24c8 <UART_u8SendString+0x3a>
		while(Copy_pu8String[Local_u8Counter] != '\0')
		{
			UART_voidSendData(Copy_pu8String[Local_u8Counter]);
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	28 2f       	mov	r18, r24
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	9c 81       	ldd	r25, Y+4	; 0x04
    24b6:	fc 01       	movw	r30, r24
    24b8:	e2 0f       	add	r30, r18
    24ba:	f3 1f       	adc	r31, r19
    24bc:	80 81       	ld	r24, Z
    24be:	0e 94 1e 12 	call	0x243c	; 0x243c <UART_voidSendData>
			Local_u8Counter++;
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	8f 5f       	subi	r24, 0xFF	; 255
    24c6:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState= OK ;
	if(Copy_pu8String != NULL)
	{
		uint8 Local_u8Counter = 0 ;
		while(Copy_pu8String[Local_u8Counter] != '\0')
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	fc 01       	movw	r30, r24
    24d4:	e2 0f       	add	r30, r18
    24d6:	f3 1f       	adc	r31, r19
    24d8:	80 81       	ld	r24, Z
    24da:	88 23       	and	r24, r24
    24dc:	39 f7       	brne	.-50     	; 0x24ac <UART_u8SendString+0x1e>
    24de:	02 c0       	rjmp	.+4      	; 0x24e4 <UART_u8SendString+0x56>
		}

	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    24e0:	82 e0       	ldi	r24, 0x02	; 2
    24e2:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    24e4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	08 95       	ret

000024f4 <UART_u8RecieveString>:


uint8 UART_u8RecieveString(uint8 * Copy_pu8String , uint8 Copy_u8Size)
{
    24f4:	0f 93       	push	r16
    24f6:	1f 93       	push	r17
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <UART_u8RecieveString+0xa>
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <UART_u8RecieveString+0xc>
    2500:	0f 92       	push	r0
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	9c 83       	std	Y+4, r25	; 0x04
    2508:	8b 83       	std	Y+3, r24	; 0x03
    250a:	6d 83       	std	Y+5, r22	; 0x05
	uint8 Local_u8ErrorState= OK ;
    250c:	1a 82       	std	Y+2, r1	; 0x02

		if(Copy_pu8String != NULL)
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	9c 81       	ldd	r25, Y+4	; 0x04
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	b1 f0       	breq	.+44     	; 0x2542 <UART_u8RecieveString+0x4e>
		{
			uint8 Local_u8Counter  ;

			for(Local_u8Counter = 0  ; Local_u8Counter< Copy_u8Size ; Local_u8Counter++ )
    2516:	19 82       	std	Y+1, r1	; 0x01
    2518:	0f c0       	rjmp	.+30     	; 0x2538 <UART_u8RecieveString+0x44>
			{
				Copy_pu8String[Local_u8Counter] = UART_voidReceiveData();
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	28 2f       	mov	r18, r24
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	9c 81       	ldd	r25, Y+4	; 0x04
    2524:	8c 01       	movw	r16, r24
    2526:	02 0f       	add	r16, r18
    2528:	13 1f       	adc	r17, r19
    252a:	0e 94 38 12 	call	0x2470	; 0x2470 <UART_voidReceiveData>
    252e:	f8 01       	movw	r30, r16
    2530:	80 83       	st	Z, r24

		if(Copy_pu8String != NULL)
		{
			uint8 Local_u8Counter  ;

			for(Local_u8Counter = 0  ; Local_u8Counter< Copy_u8Size ; Local_u8Counter++ )
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	8f 5f       	subi	r24, 0xFF	; 255
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	99 81       	ldd	r25, Y+1	; 0x01
    253a:	8d 81       	ldd	r24, Y+5	; 0x05
    253c:	98 17       	cp	r25, r24
    253e:	68 f3       	brcs	.-38     	; 0x251a <UART_u8RecieveString+0x26>
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <UART_u8RecieveString+0x52>


		}
		else
		{
			Local_u8ErrorState = NULL_PTR_ERR;
    2542:	82 e0       	ldi	r24, 0x02	; 2
    2544:	8a 83       	std	Y+2, r24	; 0x02
		}
		return Local_u8ErrorState;
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	08 95       	ret

0000255c <main>:
void Login(void);



int main (void)
{
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	0f 92       	push	r0
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62

    PORT_voidInit();
    2566:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <PORT_voidInit>

    UART_voidInit();
    256a:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <UART_voidInit>
    ADC_voidInit();
    256e:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>



    Login();
    2572:	0e 94 9f 14 	call	0x293e	; 0x293e <Login>


    uint8 Number = 0  ;
    2576:	19 82       	std	Y+1, r1	; 0x01
    2578:	ff cf       	rjmp	.-2      	; 0x2578 <main+0x1c>

0000257a <APP_voidControlLight>:




void APP_voidControlLight(void)
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	60 97       	sbiw	r28, 0x10	; 16
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
				uint8   LOCAL_u8Light , LOCAL_u8LedNum  ;
	           	LOCAL_u8Light =   LDR_u16GetAnalogVolt(ADC_u8GetChannelReading(ADC_SINGLE_ENDED_CH7));
    258e:	87 e0       	ldi	r24, 0x07	; 7
    2590:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8GetChannelReading>
    2594:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <LDR_u16GetAnalogVolt>
    2598:	88 8b       	std	Y+16, r24	; 0x10

	    	      LOCAL_u8LedNum = LOCAL_u8Light/10  ;
    259a:	88 89       	ldd	r24, Y+16	; 0x10
    259c:	9a e0       	ldi	r25, 0x0A	; 10
    259e:	69 2f       	mov	r22, r25
    25a0:	0e 94 a9 19 	call	0x3352	; 0x3352 <__udivmodqi4>
    25a4:	8f 87       	std	Y+15, r24	; 0x0f
	    	      DIO_u8SetPortValue(DIO_u8PORTC,(0xFF>>(LOCAL_u8LedNum)));
    25a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a8:	28 2f       	mov	r18, r24
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	8f ef       	ldi	r24, 0xFF	; 255
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <APP_voidControlLight+0x3c>
    25b2:	95 95       	asr	r25
    25b4:	87 95       	ror	r24
    25b6:	2a 95       	dec	r18
    25b8:	e2 f7       	brpl	.-8      	; 0x25b2 <APP_voidControlLight+0x38>
    25ba:	98 2f       	mov	r25, r24
    25bc:	82 e0       	ldi	r24, 0x02	; 2
    25be:	69 2f       	mov	r22, r25
    25c0:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DIO_u8SetPortValue>
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	a8 ec       	ldi	r26, 0xC8	; 200
    25ca:	b2 e4       	ldi	r27, 0x42	; 66
    25cc:	8b 87       	std	Y+11, r24	; 0x0b
    25ce:	9c 87       	std	Y+12, r25	; 0x0c
    25d0:	ad 87       	std	Y+13, r26	; 0x0d
    25d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25da:	9e 85       	ldd	r25, Y+14	; 0x0e
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	4a e7       	ldi	r20, 0x7A	; 122
    25e2:	55 e4       	ldi	r21, 0x45	; 69
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	8f 83       	std	Y+7, r24	; 0x07
    25ee:	98 87       	std	Y+8, r25	; 0x08
    25f0:	a9 87       	std	Y+9, r26	; 0x09
    25f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25f4:	6f 81       	ldd	r22, Y+7	; 0x07
    25f6:	78 85       	ldd	r23, Y+8	; 0x08
    25f8:	89 85       	ldd	r24, Y+9	; 0x09
    25fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2608:	88 23       	and	r24, r24
    260a:	2c f4       	brge	.+10     	; 0x2616 <APP_voidControlLight+0x9c>
		__ticks = 1;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9e 83       	std	Y+6, r25	; 0x06
    2612:	8d 83       	std	Y+5, r24	; 0x05
    2614:	3f c0       	rjmp	.+126    	; 0x2694 <APP_voidControlLight+0x11a>
	else if (__tmp > 65535)
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	3f ef       	ldi	r19, 0xFF	; 255
    2622:	4f e7       	ldi	r20, 0x7F	; 127
    2624:	57 e4       	ldi	r21, 0x47	; 71
    2626:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    262a:	18 16       	cp	r1, r24
    262c:	4c f5       	brge	.+82     	; 0x2680 <APP_voidControlLight+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2630:	7c 85       	ldd	r23, Y+12	; 0x0c
    2632:	8d 85       	ldd	r24, Y+13	; 0x0d
    2634:	9e 85       	ldd	r25, Y+14	; 0x0e
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9e 83       	std	Y+6, r25	; 0x06
    2654:	8d 83       	std	Y+5, r24	; 0x05
    2656:	0f c0       	rjmp	.+30     	; 0x2676 <APP_voidControlLight+0xfc>
    2658:	80 e9       	ldi	r24, 0x90	; 144
    265a:	91 e0       	ldi	r25, 0x01	; 1
    265c:	9c 83       	std	Y+4, r25	; 0x04
    265e:	8b 83       	std	Y+3, r24	; 0x03
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <APP_voidControlLight+0xea>
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	9e 83       	std	Y+6, r25	; 0x06
    2674:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	69 f7       	brne	.-38     	; 0x2658 <APP_voidControlLight+0xde>
    267e:	14 c0       	rjmp	.+40     	; 0x26a8 <APP_voidControlLight+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2680:	6f 81       	ldd	r22, Y+7	; 0x07
    2682:	78 85       	ldd	r23, Y+8	; 0x08
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9e 83       	std	Y+6, r25	; 0x06
    2692:	8d 83       	std	Y+5, r24	; 0x05
    2694:	8d 81       	ldd	r24, Y+5	; 0x05
    2696:	9e 81       	ldd	r25, Y+6	; 0x06
    2698:	9a 83       	std	Y+2, r25	; 0x02
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	9a 81       	ldd	r25, Y+2	; 0x02
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <APP_voidControlLight+0x126>
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
	    	      _delay_ms(100);
}
    26a8:	60 96       	adiw	r28, 0x10	; 16
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <APP_voidOpenDoor>:




void APP_voidOpenDoor(void)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
	TIMER1_voidInit();
    26c2:	0e 94 81 10 	call	0x2102	; 0x2102 <TIMER1_voidInit>


	TIMER1_voidSetCompValue(6000);
    26c6:	80 e7       	ldi	r24, 0x70	; 112
    26c8:	97 e1       	ldi	r25, 0x17	; 23
    26ca:	0e 94 c6 10 	call	0x218c	; 0x218c <TIMER1_voidSetCompValue>
//			for ( Local_u8Counter = 100; Local_u8Counter < 6000; Local_u8Counter++)
//			{
//				TIMER1_voidSetCompValue(Local_u8Counter);
//			}

}
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <APP_voidCloseDoor>:
void APP_voidCloseDoor(void)
{
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62

	TIMER1_voidInit();
    26dc:	0e 94 81 10 	call	0x2102	; 0x2102 <TIMER1_voidInit>
	TIMER1_voidSetCompValue(1000);
    26e0:	88 ee       	ldi	r24, 0xE8	; 232
    26e2:	93 e0       	ldi	r25, 0x03	; 3
    26e4:	0e 94 c6 10 	call	0x218c	; 0x218c <TIMER1_voidSetCompValue>
//			for ( Local_u8Counter = 6000; Local_u8Counter >100; Local_u8Counter--)
//			{
//				TIMER1_voidSetCompValue(Local_u8Counter);
//			}

}
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <APP_voidPlayMusic>:




void APP_voidPlayMusic(void)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	62 97       	sbiw	r28, 0x12	; 18
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61

	while (1)
	{
		uint32 Local_u8Counter;

		for ( Local_u8Counter = 0; Local_u8Counter < 20000; Local_u8Counter++)
    2702:	1f 86       	std	Y+15, r1	; 0x0f
    2704:	18 8a       	std	Y+16, r1	; 0x10
    2706:	19 8a       	std	Y+17, r1	; 0x11
    2708:	1a 8a       	std	Y+18, r1	; 0x12
    270a:	82 c0       	rjmp	.+260    	; 0x2810 <APP_voidPlayMusic+0x122>
		{
			DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN5,DIO_u8PIN_HIGH);
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	65 e0       	ldi	r22, 0x05	; 5
    2710:	41 e0       	ldi	r20, 0x01	; 1
    2712:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <DIO_u8SetPinValue>
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	a0 e2       	ldi	r26, 0x20	; 32
    271c:	b1 e4       	ldi	r27, 0x41	; 65
    271e:	8b 87       	std	Y+11, r24	; 0x0b
    2720:	9c 87       	std	Y+12, r25	; 0x0c
    2722:	ad 87       	std	Y+13, r26	; 0x0d
    2724:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2726:	6b 85       	ldd	r22, Y+11	; 0x0b
    2728:	7c 85       	ldd	r23, Y+12	; 0x0c
    272a:	8d 85       	ldd	r24, Y+13	; 0x0d
    272c:	9e 85       	ldd	r25, Y+14	; 0x0e
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4a e7       	ldi	r20, 0x7A	; 122
    2734:	55 e4       	ldi	r21, 0x45	; 69
    2736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	8f 83       	std	Y+7, r24	; 0x07
    2740:	98 87       	std	Y+8, r25	; 0x08
    2742:	a9 87       	std	Y+9, r26	; 0x09
    2744:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e8       	ldi	r20, 0x80	; 128
    2754:	5f e3       	ldi	r21, 0x3F	; 63
    2756:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    275a:	88 23       	and	r24, r24
    275c:	2c f4       	brge	.+10     	; 0x2768 <APP_voidPlayMusic+0x7a>
		__ticks = 1;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
    2766:	3f c0       	rjmp	.+126    	; 0x27e6 <APP_voidPlayMusic+0xf8>
	else if (__tmp > 65535)
    2768:	6f 81       	ldd	r22, Y+7	; 0x07
    276a:	78 85       	ldd	r23, Y+8	; 0x08
    276c:	89 85       	ldd	r24, Y+9	; 0x09
    276e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	3f ef       	ldi	r19, 0xFF	; 255
    2774:	4f e7       	ldi	r20, 0x7F	; 127
    2776:	57 e4       	ldi	r21, 0x47	; 71
    2778:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    277c:	18 16       	cp	r1, r24
    277e:	4c f5       	brge	.+82     	; 0x27d2 <APP_voidPlayMusic+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2780:	6b 85       	ldd	r22, Y+11	; 0x0b
    2782:	7c 85       	ldd	r23, Y+12	; 0x0c
    2784:	8d 85       	ldd	r24, Y+13	; 0x0d
    2786:	9e 85       	ldd	r25, Y+14	; 0x0e
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e2       	ldi	r20, 0x20	; 32
    278e:	51 e4       	ldi	r21, 0x41	; 65
    2790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
    27a8:	0f c0       	rjmp	.+30     	; 0x27c8 <APP_voidPlayMusic+0xda>
    27aa:	80 e9       	ldi	r24, 0x90	; 144
    27ac:	91 e0       	ldi	r25, 0x01	; 1
    27ae:	9c 83       	std	Y+4, r25	; 0x04
    27b0:	8b 83       	std	Y+3, r24	; 0x03
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
    27b4:	9c 81       	ldd	r25, Y+4	; 0x04
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <APP_voidPlayMusic+0xc8>
    27ba:	9c 83       	std	Y+4, r25	; 0x04
    27bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	9e 83       	std	Y+6, r25	; 0x06
    27c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ca:	9e 81       	ldd	r25, Y+6	; 0x06
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	69 f7       	brne	.-38     	; 0x27aa <APP_voidPlayMusic+0xbc>
    27d0:	14 c0       	rjmp	.+40     	; 0x27fa <APP_voidPlayMusic+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d2:	6f 81       	ldd	r22, Y+7	; 0x07
    27d4:	78 85       	ldd	r23, Y+8	; 0x08
    27d6:	89 85       	ldd	r24, Y+9	; 0x09
    27d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
    27e6:	8d 81       	ldd	r24, Y+5	; 0x05
    27e8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ea:	9a 83       	std	Y+2, r25	; 0x02
    27ec:	89 83       	std	Y+1, r24	; 0x01
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	9a 81       	ldd	r25, Y+2	; 0x02
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <APP_voidPlayMusic+0x104>
    27f6:	9a 83       	std	Y+2, r25	; 0x02
    27f8:	89 83       	std	Y+1, r24	; 0x01

	while (1)
	{
		uint32 Local_u8Counter;

		for ( Local_u8Counter = 0; Local_u8Counter < 20000; Local_u8Counter++)
    27fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    27fc:	98 89       	ldd	r25, Y+16	; 0x10
    27fe:	a9 89       	ldd	r26, Y+17	; 0x11
    2800:	ba 89       	ldd	r27, Y+18	; 0x12
    2802:	01 96       	adiw	r24, 0x01	; 1
    2804:	a1 1d       	adc	r26, r1
    2806:	b1 1d       	adc	r27, r1
    2808:	8f 87       	std	Y+15, r24	; 0x0f
    280a:	98 8b       	std	Y+16, r25	; 0x10
    280c:	a9 8b       	std	Y+17, r26	; 0x11
    280e:	ba 8b       	std	Y+18, r27	; 0x12
    2810:	8f 85       	ldd	r24, Y+15	; 0x0f
    2812:	98 89       	ldd	r25, Y+16	; 0x10
    2814:	a9 89       	ldd	r26, Y+17	; 0x11
    2816:	ba 89       	ldd	r27, Y+18	; 0x12
    2818:	80 32       	cpi	r24, 0x20	; 32
    281a:	2e e4       	ldi	r18, 0x4E	; 78
    281c:	92 07       	cpc	r25, r18
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	a2 07       	cpc	r26, r18
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	b2 07       	cpc	r27, r18
    2826:	08 f4       	brcc	.+2      	; 0x282a <APP_voidPlayMusic+0x13c>
    2828:	71 cf       	rjmp	.-286    	; 0x270c <APP_voidPlayMusic+0x1e>
    282a:	6b cf       	rjmp	.-298    	; 0x2702 <APP_voidPlayMusic+0x14>

0000282c <APP_voidControlFan>:




void APP_voidControlFan(void)
{
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62

}
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <func2>:


uint8 TIMER_u8OVFCounter ;

void func2(void)
{
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
	TIMER_u8OVFCounter++ ;
    2842:	80 91 21 01 	lds	r24, 0x0121
    2846:	8f 5f       	subi	r24, 0xFF	; 255
    2848:	80 93 21 01 	sts	0x0121, r24
}
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <func>:

uint8 counter ;

 uint32  read1, read2 ;
void func(void)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62

	counter++;
    285a:	80 91 1c 01 	lds	r24, 0x011C
    285e:	8f 5f       	subi	r24, 0xFF	; 255
    2860:	80 93 1c 01 	sts	0x011C, r24

	if(counter==1)
    2864:	80 91 1c 01 	lds	r24, 0x011C
    2868:	81 30       	cpi	r24, 0x01	; 1
    286a:	91 f4       	brne	.+36     	; 0x2890 <func+0x3e>
		{

		//read1 = ICU_u32GetVal();
		TIMER1_voidSetTimerVal(0u);
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <TIMER1_voidSetTimerVal>
		read1 = TIMER1_u16GetTimerVal();
    2874:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <TIMER1_u16GetTimerVal>
    2878:	cc 01       	movw	r24, r24
    287a:	a0 e0       	ldi	r26, 0x00	; 0
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	80 93 14 01 	sts	0x0114, r24
    2882:	90 93 15 01 	sts	0x0115, r25
    2886:	a0 93 16 01 	sts	0x0116, r26
    288a:	b0 93 17 01 	sts	0x0117, r27
    288e:	15 c0       	rjmp	.+42     	; 0x28ba <func+0x68>
		//ICU_voidSetTriggerSrc(FALLING_EDGE);



		}
	else if(counter==2)
    2890:	80 91 1c 01 	lds	r24, 0x011C
    2894:	82 30       	cpi	r24, 0x02	; 2
    2896:	89 f4       	brne	.+34     	; 0x28ba <func+0x68>
		{
		read2 = TIMER1_u16GetTimerVal();
    2898:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <TIMER1_u16GetTimerVal>
    289c:	cc 01       	movw	r24, r24
    289e:	a0 e0       	ldi	r26, 0x00	; 0
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	80 93 10 01 	sts	0x0110, r24
    28a6:	90 93 11 01 	sts	0x0111, r25
    28aa:	a0 93 12 01 	sts	0x0112, r26
    28ae:	b0 93 13 01 	sts	0x0113, r27

		//GIE_voidDisableglobal();
		EXTI_u8SetSenseCtrl(EXTI_u8INT0,EXTI_u8RISING_EDGE);
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	63 e0       	ldi	r22, 0x03	; 3
    28b6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <EXTI_u8SetSenseCtrl>
		}




}
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret

000028c0 <APP_voidControlFanSpeed>:

 uint32 distance  , time ;

void APP_voidControlFanSpeed(void)
{
    28c0:	af 92       	push	r10
    28c2:	bf 92       	push	r11
    28c4:	cf 92       	push	r12
    28c6:	df 92       	push	r13
    28c8:	ef 92       	push	r14
    28ca:	ff 92       	push	r15
    28cc:	0f 93       	push	r16
    28ce:	1f 93       	push	r17
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62

//	        TIMERS_u8SetCallBack(TIMER1_OVF,&func2);
//	        TIMERS_u8SetCallBack(TIMER1_ICU,&func);


					TIMER0_voidInit();
    28d8:	0e 94 aa 11 	call	0x2354	; 0x2354 <TIMER0_voidInit>
					 CLCD_voidInit();
    28dc:	0e 94 0e 07 	call	0xe1c	; 0xe1c <CLCD_voidInit>
					while(1)
					{
					TIMER0_voidSetCompValue(Map(0,255,0,250,ADC_u8GetChannelReading(ADC_SINGLE_ENDED_CH0)));
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8GetChannelReading>
    28e6:	cc 01       	movw	r24, r24
    28e8:	a0 e0       	ldi	r26, 0x00	; 0
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	00 d0       	rcall	.+0      	; 0x28ee <APP_voidControlFanSpeed+0x2e>
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <APP_voidControlFanSpeed+0x30>
    28f0:	ed b7       	in	r30, 0x3d	; 61
    28f2:	fe b7       	in	r31, 0x3e	; 62
    28f4:	31 96       	adiw	r30, 0x01	; 1
    28f6:	80 83       	st	Z, r24
    28f8:	91 83       	std	Z+1, r25	; 0x01
    28fa:	a2 83       	std	Z+2, r26	; 0x02
    28fc:	b3 83       	std	Z+3, r27	; 0x03
    28fe:	60 e0       	ldi	r22, 0x00	; 0
    2900:	70 e0       	ldi	r23, 0x00	; 0
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	2f ef       	ldi	r18, 0xFF	; 255
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e0       	ldi	r20, 0x00	; 0
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	ee 24       	eor	r14, r14
    2910:	ff 24       	eor	r15, r15
    2912:	87 01       	movw	r16, r14
    2914:	0f 2e       	mov	r0, r31
    2916:	fa ef       	ldi	r31, 0xFA	; 250
    2918:	af 2e       	mov	r10, r31
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	bf 2e       	mov	r11, r31
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	cf 2e       	mov	r12, r31
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	df 2e       	mov	r13, r31
    2926:	f0 2d       	mov	r31, r0
    2928:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <Map>
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	0e 94 db 11 	call	0x23b6	; 0x23b6 <TIMER0_voidSetCompValue>
    293c:	d1 cf       	rjmp	.-94     	; 0x28e0 <APP_voidControlFanSpeed+0x20>

0000293e <Login>:




void Login(void)
{
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	c3 56       	subi	r28, 0x63	; 99
    294c:	d0 40       	sbci	r29, 0x00	; 0
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61

	 CLCD_voidInit();
    2958:	0e 94 0e 07 	call	0xe1c	; 0xe1c <CLCD_voidInit>


    uint8 LOCAL_u8Id[4] = {1,2,3,4} , LOCAL_u8Password[4] = {4,3,2,1} ;
    295c:	fe 01       	movw	r30, r28
    295e:	e2 5b       	subi	r30, 0xB2	; 178
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	80 83       	st	Z, r24
    2966:	fe 01       	movw	r30, r28
    2968:	e2 5b       	subi	r30, 0xB2	; 178
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	82 e0       	ldi	r24, 0x02	; 2
    296e:	81 83       	std	Z+1, r24	; 0x01
    2970:	fe 01       	movw	r30, r28
    2972:	e2 5b       	subi	r30, 0xB2	; 178
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	83 e0       	ldi	r24, 0x03	; 3
    2978:	82 83       	std	Z+2, r24	; 0x02
    297a:	fe 01       	movw	r30, r28
    297c:	e2 5b       	subi	r30, 0xB2	; 178
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	84 e0       	ldi	r24, 0x04	; 4
    2982:	83 83       	std	Z+3, r24	; 0x03
    2984:	fe 01       	movw	r30, r28
    2986:	ee 5a       	subi	r30, 0xAE	; 174
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	84 e0       	ldi	r24, 0x04	; 4
    298c:	80 83       	st	Z, r24
    298e:	fe 01       	movw	r30, r28
    2990:	ee 5a       	subi	r30, 0xAE	; 174
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	83 e0       	ldi	r24, 0x03	; 3
    2996:	81 83       	std	Z+1, r24	; 0x01
    2998:	fe 01       	movw	r30, r28
    299a:	ee 5a       	subi	r30, 0xAE	; 174
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	82 e0       	ldi	r24, 0x02	; 2
    29a0:	82 83       	std	Z+2, r24	; 0x02
    29a2:	fe 01       	movw	r30, r28
    29a4:	ee 5a       	subi	r30, 0xAE	; 174
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	83 83       	std	Z+3, r24	; 0x03

	uint8 LOCAL_u8CheckId[4] = {1,2,3,4} , LOCAL_u8CheckPassword[4] = {4,3,2,1} ;
    29ac:	fe 01       	movw	r30, r28
    29ae:	ea 5a       	subi	r30, 0xAA	; 170
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	80 83       	st	Z, r24
    29b6:	fe 01       	movw	r30, r28
    29b8:	ea 5a       	subi	r30, 0xAA	; 170
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	82 e0       	ldi	r24, 0x02	; 2
    29be:	81 83       	std	Z+1, r24	; 0x01
    29c0:	fe 01       	movw	r30, r28
    29c2:	ea 5a       	subi	r30, 0xAA	; 170
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	83 e0       	ldi	r24, 0x03	; 3
    29c8:	82 83       	std	Z+2, r24	; 0x02
    29ca:	fe 01       	movw	r30, r28
    29cc:	ea 5a       	subi	r30, 0xAA	; 170
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	84 e0       	ldi	r24, 0x04	; 4
    29d2:	83 83       	std	Z+3, r24	; 0x03
    29d4:	fe 01       	movw	r30, r28
    29d6:	e6 5a       	subi	r30, 0xA6	; 166
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	84 e0       	ldi	r24, 0x04	; 4
    29dc:	80 83       	st	Z, r24
    29de:	fe 01       	movw	r30, r28
    29e0:	e6 5a       	subi	r30, 0xA6	; 166
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	83 e0       	ldi	r24, 0x03	; 3
    29e6:	81 83       	std	Z+1, r24	; 0x01
    29e8:	fe 01       	movw	r30, r28
    29ea:	e6 5a       	subi	r30, 0xA6	; 166
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	82 83       	std	Z+2, r24	; 0x02
    29f2:	fe 01       	movw	r30, r28
    29f4:	e6 5a       	subi	r30, 0xA6	; 166
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	83 83       	std	Z+3, r24	; 0x03

    uint8 ID = 1 , Password = 1 ;
    29fc:	fe 01       	movw	r30, r28
    29fe:	e3 5b       	subi	r30, 0xB3	; 179
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	80 83       	st	Z, r24
    2a06:	fe 01       	movw	r30, r28
    2a08:	e4 5b       	subi	r30, 0xB4	; 180
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	80 83       	st	Z, r24

    uint8 LoginI = 3 ;
    2a10:	fe 01       	movw	r30, r28
    2a12:	e5 5b       	subi	r30, 0xB5	; 181
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	83 e0       	ldi	r24, 0x03	; 3
    2a18:	80 83       	st	Z, r24



    CLCD_voidGoToXY(3,0);
    2a1a:	83 e0       	ldi	r24, 0x03	; 3
    2a1c:	60 e0       	ldi	r22, 0x00	; 0
    2a1e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <CLCD_voidGoToXY>

    CLCD_u8SendString("Welcome...");
    2a22:	80 e6       	ldi	r24, 0x60	; 96
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	0e 94 a8 07 	call	0xf50	; 0xf50 <CLCD_u8SendString>
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	ed 5b       	subi	r30, 0xBD	; 189
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	aa ef       	ldi	r26, 0xFA	; 250
    2a36:	b4 e4       	ldi	r27, 0x44	; 68
    2a38:	80 83       	st	Z, r24
    2a3a:	91 83       	std	Z+1, r25	; 0x01
    2a3c:	a2 83       	std	Z+2, r26	; 0x02
    2a3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a40:	8e 01       	movw	r16, r28
    2a42:	01 5c       	subi	r16, 0xC1	; 193
    2a44:	1f 4f       	sbci	r17, 0xFF	; 255
    2a46:	fe 01       	movw	r30, r28
    2a48:	ed 5b       	subi	r30, 0xBD	; 189
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	60 81       	ld	r22, Z
    2a4e:	71 81       	ldd	r23, Z+1	; 0x01
    2a50:	82 81       	ldd	r24, Z+2	; 0x02
    2a52:	93 81       	ldd	r25, Z+3	; 0x03
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	4a e7       	ldi	r20, 0x7A	; 122
    2a5a:	55 e4       	ldi	r21, 0x45	; 69
    2a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	f8 01       	movw	r30, r16
    2a66:	80 83       	st	Z, r24
    2a68:	91 83       	std	Z+1, r25	; 0x01
    2a6a:	a2 83       	std	Z+2, r26	; 0x02
    2a6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a6e:	fe 01       	movw	r30, r28
    2a70:	ff 96       	adiw	r30, 0x3f	; 63
    2a72:	60 81       	ld	r22, Z
    2a74:	71 81       	ldd	r23, Z+1	; 0x01
    2a76:	82 81       	ldd	r24, Z+2	; 0x02
    2a78:	93 81       	ldd	r25, Z+3	; 0x03
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e8       	ldi	r20, 0x80	; 128
    2a80:	5f e3       	ldi	r21, 0x3F	; 63
    2a82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a86:	88 23       	and	r24, r24
    2a88:	2c f4       	brge	.+10     	; 0x2a94 <Login+0x156>
		__ticks = 1;
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	9e af       	std	Y+62, r25	; 0x3e
    2a90:	8d af       	std	Y+61, r24	; 0x3d
    2a92:	46 c0       	rjmp	.+140    	; 0x2b20 <Login+0x1e2>
	else if (__tmp > 65535)
    2a94:	fe 01       	movw	r30, r28
    2a96:	ff 96       	adiw	r30, 0x3f	; 63
    2a98:	60 81       	ld	r22, Z
    2a9a:	71 81       	ldd	r23, Z+1	; 0x01
    2a9c:	82 81       	ldd	r24, Z+2	; 0x02
    2a9e:	93 81       	ldd	r25, Z+3	; 0x03
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	3f ef       	ldi	r19, 0xFF	; 255
    2aa4:	4f e7       	ldi	r20, 0x7F	; 127
    2aa6:	57 e4       	ldi	r21, 0x47	; 71
    2aa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aac:	18 16       	cp	r1, r24
    2aae:	64 f5       	brge	.+88     	; 0x2b08 <Login+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	ed 5b       	subi	r30, 0xBD	; 189
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	60 81       	ld	r22, Z
    2ab8:	71 81       	ldd	r23, Z+1	; 0x01
    2aba:	82 81       	ldd	r24, Z+2	; 0x02
    2abc:	93 81       	ldd	r25, Z+3	; 0x03
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e2       	ldi	r20, 0x20	; 32
    2ac4:	51 e4       	ldi	r21, 0x41	; 65
    2ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	bc 01       	movw	r22, r24
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	9e af       	std	Y+62, r25	; 0x3e
    2adc:	8d af       	std	Y+61, r24	; 0x3d
    2ade:	0f c0       	rjmp	.+30     	; 0x2afe <Login+0x1c0>
    2ae0:	80 e9       	ldi	r24, 0x90	; 144
    2ae2:	91 e0       	ldi	r25, 0x01	; 1
    2ae4:	9c af       	std	Y+60, r25	; 0x3c
    2ae6:	8b af       	std	Y+59, r24	; 0x3b
    2ae8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2aea:	9c ad       	ldd	r25, Y+60	; 0x3c
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	f1 f7       	brne	.-4      	; 0x2aec <Login+0x1ae>
    2af0:	9c af       	std	Y+60, r25	; 0x3c
    2af2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2af6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	9e af       	std	Y+62, r25	; 0x3e
    2afc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b00:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b02:	00 97       	sbiw	r24, 0x00	; 0
    2b04:	69 f7       	brne	.-38     	; 0x2ae0 <Login+0x1a2>
    2b06:	6c c3       	rjmp	.+1752   	; 0x31e0 <Login+0x8a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b08:	fe 01       	movw	r30, r28
    2b0a:	ff 96       	adiw	r30, 0x3f	; 63
    2b0c:	60 81       	ld	r22, Z
    2b0e:	71 81       	ldd	r23, Z+1	; 0x01
    2b10:	82 81       	ldd	r24, Z+2	; 0x02
    2b12:	93 81       	ldd	r25, Z+3	; 0x03
    2b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	9e af       	std	Y+62, r25	; 0x3e
    2b1e:	8d af       	std	Y+61, r24	; 0x3d
    2b20:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b22:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b24:	9a af       	std	Y+58, r25	; 0x3a
    2b26:	89 af       	std	Y+57, r24	; 0x39
    2b28:	89 ad       	ldd	r24, Y+57	; 0x39
    2b2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <Login+0x1ee>
    2b30:	9a af       	std	Y+58, r25	; 0x3a
    2b32:	89 af       	std	Y+57, r24	; 0x39
    2b34:	55 c3       	rjmp	.+1706   	; 0x31e0 <Login+0x8a2>
    while (LoginI)
    {



    	 ID = 1 ;
    2b36:	fe 01       	movw	r30, r28
    2b38:	e3 5b       	subi	r30, 0xB3	; 179
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	80 83       	st	Z, r24
    	 Password = 1 ;
    2b40:	fe 01       	movw	r30, r28
    2b42:	e4 5b       	subi	r30, 0xB4	; 180
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	80 83       	st	Z, r24





        CLCD_voidSendCmd(1);
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <CLCD_voidSendCmd>

        CLCD_u8SendString("Enter ID : ");
    2b50:	8b e6       	ldi	r24, 0x6B	; 107
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	0e 94 a8 07 	call	0xf50	; 0xf50 <CLCD_u8SendString>
        CLCD_voidGoToXY(0,1);
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	61 e0       	ldi	r22, 0x01	; 1
    2b5c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <CLCD_voidGoToXY>

        int m = 0xff;
    2b60:	fe 01       	movw	r30, r28
    2b62:	e7 5b       	subi	r30, 0xB7	; 183
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	8f ef       	ldi	r24, 0xFF	; 255
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
        int i =4;
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e9 5b       	subi	r30, 0xB9	; 185
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	84 e0       	ldi	r24, 0x04	; 4
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	91 83       	std	Z+1, r25	; 0x01
    2b7a:	80 83       	st	Z, r24
    2b7c:	3d c0       	rjmp	.+122    	; 0x2bf8 <Login+0x2ba>

        while(i)
        {
            m = KPD_u8GetPressedKey();
    2b7e:	0e 94 56 0f 	call	0x1eac	; 0x1eac <KPD_u8GetPressedKey>
    2b82:	fe 01       	movw	r30, r28
    2b84:	e7 5b       	subi	r30, 0xB7	; 183
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	88 2f       	mov	r24, r24
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	91 83       	std	Z+1, r25	; 0x01
    2b8e:	80 83       	st	Z, r24

            if(m!= 0xff)
    2b90:	fe 01       	movw	r30, r28
    2b92:	e7 5b       	subi	r30, 0xB7	; 183
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	8f 3f       	cpi	r24, 0xFF	; 255
    2b9c:	91 05       	cpc	r25, r1
    2b9e:	61 f1       	breq	.+88     	; 0x2bf8 <Login+0x2ba>
            {

                LOCAL_u8CheckId[4-i] = m ;
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e9 5b       	subi	r30, 0xB9	; 185
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	24 e0       	ldi	r18, 0x04	; 4
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	28 1b       	sub	r18, r24
    2bb0:	39 0b       	sbc	r19, r25
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e7 5b       	subi	r30, 0xB7	; 183
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	40 81       	ld	r20, Z
    2bba:	ce 01       	movw	r24, r28
    2bbc:	8a 5a       	subi	r24, 0xAA	; 170
    2bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	e2 0f       	add	r30, r18
    2bc4:	f3 1f       	adc	r31, r19
    2bc6:	40 83       	st	Z, r20
                i--;
    2bc8:	de 01       	movw	r26, r28
    2bca:	a9 5b       	subi	r26, 0xB9	; 185
    2bcc:	bf 4f       	sbci	r27, 0xFF	; 255
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e9 5b       	subi	r30, 0xB9	; 185
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	80 81       	ld	r24, Z
    2bd6:	91 81       	ldd	r25, Z+1	; 0x01
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	8d 93       	st	X+, r24
    2bdc:	9c 93       	st	X, r25

                CLCD_voidSendNumber(m);
    2bde:	fe 01       	movw	r30, r28
    2be0:	e7 5b       	subi	r30, 0xB7	; 183
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	80 81       	ld	r24, Z
    2be6:	91 81       	ldd	r25, Z+1	; 0x01
    2be8:	aa 27       	eor	r26, r26
    2bea:	97 fd       	sbrc	r25, 7
    2bec:	a0 95       	com	r26
    2bee:	ba 2f       	mov	r27, r26
    2bf0:	bc 01       	movw	r22, r24
    2bf2:	cd 01       	movw	r24, r26
    2bf4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <CLCD_voidSendNumber>
        CLCD_voidGoToXY(0,1);

        int m = 0xff;
        int i =4;

        while(i)
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	e9 5b       	subi	r30, 0xB9	; 185
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	80 81       	ld	r24, Z
    2c00:	91 81       	ldd	r25, Z+1	; 0x01
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <Login+0x2ca>
    2c06:	bb cf       	rjmp	.-138    	; 0x2b7e <Login+0x240>
            }
        }



        for(i=0 ; i<4 ; i++)
    2c08:	fe 01       	movw	r30, r28
    2c0a:	e9 5b       	subi	r30, 0xB9	; 185
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	11 82       	std	Z+1, r1	; 0x01
    2c10:	10 82       	st	Z, r1
    2c12:	2a c0       	rjmp	.+84     	; 0x2c68 <Login+0x32a>
        {
            if(LOCAL_u8CheckId[i]!=LOCAL_u8Id[i])
    2c14:	fe 01       	movw	r30, r28
    2c16:	e9 5b       	subi	r30, 0xB9	; 185
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	20 81       	ld	r18, Z
    2c1c:	31 81       	ldd	r19, Z+1	; 0x01
    2c1e:	ce 01       	movw	r24, r28
    2c20:	8a 5a       	subi	r24, 0xAA	; 170
    2c22:	9f 4f       	sbci	r25, 0xFF	; 255
    2c24:	fc 01       	movw	r30, r24
    2c26:	e2 0f       	add	r30, r18
    2c28:	f3 1f       	adc	r31, r19
    2c2a:	40 81       	ld	r20, Z
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e9 5b       	subi	r30, 0xB9	; 185
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	20 81       	ld	r18, Z
    2c34:	31 81       	ldd	r19, Z+1	; 0x01
    2c36:	ce 01       	movw	r24, r28
    2c38:	82 5b       	subi	r24, 0xB2	; 178
    2c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	e2 0f       	add	r30, r18
    2c40:	f3 1f       	adc	r31, r19
    2c42:	80 81       	ld	r24, Z
    2c44:	48 17       	cp	r20, r24
    2c46:	21 f0       	breq	.+8      	; 0x2c50 <Login+0x312>
            {

                ID = 0 ;
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e3 5b       	subi	r30, 0xB3	; 179
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	10 82       	st	Z, r1
            }
        }



        for(i=0 ; i<4 ; i++)
    2c50:	de 01       	movw	r26, r28
    2c52:	a9 5b       	subi	r26, 0xB9	; 185
    2c54:	bf 4f       	sbci	r27, 0xFF	; 255
    2c56:	fe 01       	movw	r30, r28
    2c58:	e9 5b       	subi	r30, 0xB9	; 185
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	80 81       	ld	r24, Z
    2c5e:	91 81       	ldd	r25, Z+1	; 0x01
    2c60:	01 96       	adiw	r24, 0x01	; 1
    2c62:	11 96       	adiw	r26, 0x01	; 1
    2c64:	9c 93       	st	X, r25
    2c66:	8e 93       	st	-X, r24
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e9 5b       	subi	r30, 0xB9	; 185
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	80 81       	ld	r24, Z
    2c70:	91 81       	ldd	r25, Z+1	; 0x01
    2c72:	84 30       	cpi	r24, 0x04	; 4
    2c74:	91 05       	cpc	r25, r1
    2c76:	74 f2       	brlt	.-100    	; 0x2c14 <Login+0x2d6>





        CLCD_voidSendCmd(1);
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <CLCD_voidSendCmd>

        CLCD_u8SendString("Enter Password:");
    2c7e:	87 e7       	ldi	r24, 0x77	; 119
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	0e 94 a8 07 	call	0xf50	; 0xf50 <CLCD_u8SendString>
        CLCD_voidGoToXY(0,1);
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	61 e0       	ldi	r22, 0x01	; 1
    2c8a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <CLCD_voidGoToXY>

            m = 0xff;
    2c8e:	fe 01       	movw	r30, r28
    2c90:	e7 5b       	subi	r30, 0xB7	; 183
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	8f ef       	ldi	r24, 0xFF	; 255
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	80 83       	st	Z, r24
            i =4;
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e9 5b       	subi	r30, 0xB9	; 185
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	84 e0       	ldi	r24, 0x04	; 4
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	91 83       	std	Z+1, r25	; 0x01
    2ca8:	80 83       	st	Z, r24
    2caa:	3d c0       	rjmp	.+122    	; 0x2d26 <Login+0x3e8>

        while(i)
        {
            m = KPD_u8GetPressedKey();
    2cac:	0e 94 56 0f 	call	0x1eac	; 0x1eac <KPD_u8GetPressedKey>
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	e7 5b       	subi	r30, 0xB7	; 183
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	88 2f       	mov	r24, r24
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	91 83       	std	Z+1, r25	; 0x01
    2cbc:	80 83       	st	Z, r24

            if(m!= 0xff)
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e7 5b       	subi	r30, 0xB7	; 183
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	80 81       	ld	r24, Z
    2cc6:	91 81       	ldd	r25, Z+1	; 0x01
    2cc8:	8f 3f       	cpi	r24, 0xFF	; 255
    2cca:	91 05       	cpc	r25, r1
    2ccc:	61 f1       	breq	.+88     	; 0x2d26 <Login+0x3e8>
            {

                LOCAL_u8CheckPassword[4-i] = m ;
    2cce:	fe 01       	movw	r30, r28
    2cd0:	e9 5b       	subi	r30, 0xB9	; 185
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	24 e0       	ldi	r18, 0x04	; 4
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	91 81       	ldd	r25, Z+1	; 0x01
    2cdc:	28 1b       	sub	r18, r24
    2cde:	39 0b       	sbc	r19, r25
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e7 5b       	subi	r30, 0xB7	; 183
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	40 81       	ld	r20, Z
    2ce8:	ce 01       	movw	r24, r28
    2cea:	86 5a       	subi	r24, 0xA6	; 166
    2cec:	9f 4f       	sbci	r25, 0xFF	; 255
    2cee:	fc 01       	movw	r30, r24
    2cf0:	e2 0f       	add	r30, r18
    2cf2:	f3 1f       	adc	r31, r19
    2cf4:	40 83       	st	Z, r20
                i--;
    2cf6:	de 01       	movw	r26, r28
    2cf8:	a9 5b       	subi	r26, 0xB9	; 185
    2cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	e9 5b       	subi	r30, 0xB9	; 185
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	80 81       	ld	r24, Z
    2d04:	91 81       	ldd	r25, Z+1	; 0x01
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	8d 93       	st	X+, r24
    2d0a:	9c 93       	st	X, r25

                CLCD_voidSendNumber(m);
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e7 5b       	subi	r30, 0xB7	; 183
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	80 81       	ld	r24, Z
    2d14:	91 81       	ldd	r25, Z+1	; 0x01
    2d16:	aa 27       	eor	r26, r26
    2d18:	97 fd       	sbrc	r25, 7
    2d1a:	a0 95       	com	r26
    2d1c:	ba 2f       	mov	r27, r26
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 db 07 	call	0xfb6	; 0xfb6 <CLCD_voidSendNumber>
        CLCD_voidGoToXY(0,1);

            m = 0xff;
            i =4;

        while(i)
    2d26:	fe 01       	movw	r30, r28
    2d28:	e9 5b       	subi	r30, 0xB9	; 185
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	80 81       	ld	r24, Z
    2d2e:	91 81       	ldd	r25, Z+1	; 0x01
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	09 f0       	breq	.+2      	; 0x2d36 <Login+0x3f8>
    2d34:	bb cf       	rjmp	.-138    	; 0x2cac <Login+0x36e>
            }
        }



        for(i=0 ; i<4 ; i++)
    2d36:	fe 01       	movw	r30, r28
    2d38:	e9 5b       	subi	r30, 0xB9	; 185
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	11 82       	std	Z+1, r1	; 0x01
    2d3e:	10 82       	st	Z, r1
    2d40:	2a c0       	rjmp	.+84     	; 0x2d96 <Login+0x458>
        {
            if(LOCAL_u8CheckPassword[i]!=LOCAL_u8Password[i])
    2d42:	fe 01       	movw	r30, r28
    2d44:	e9 5b       	subi	r30, 0xB9	; 185
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	20 81       	ld	r18, Z
    2d4a:	31 81       	ldd	r19, Z+1	; 0x01
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	86 5a       	subi	r24, 0xA6	; 166
    2d50:	9f 4f       	sbci	r25, 0xFF	; 255
    2d52:	fc 01       	movw	r30, r24
    2d54:	e2 0f       	add	r30, r18
    2d56:	f3 1f       	adc	r31, r19
    2d58:	40 81       	ld	r20, Z
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e9 5b       	subi	r30, 0xB9	; 185
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	20 81       	ld	r18, Z
    2d62:	31 81       	ldd	r19, Z+1	; 0x01
    2d64:	ce 01       	movw	r24, r28
    2d66:	8e 5a       	subi	r24, 0xAE	; 174
    2d68:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	e2 0f       	add	r30, r18
    2d6e:	f3 1f       	adc	r31, r19
    2d70:	80 81       	ld	r24, Z
    2d72:	48 17       	cp	r20, r24
    2d74:	21 f0       	breq	.+8      	; 0x2d7e <Login+0x440>
            {
                Password=0;
    2d76:	fe 01       	movw	r30, r28
    2d78:	e4 5b       	subi	r30, 0xB4	; 180
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	10 82       	st	Z, r1
            }
        }



        for(i=0 ; i<4 ; i++)
    2d7e:	de 01       	movw	r26, r28
    2d80:	a9 5b       	subi	r26, 0xB9	; 185
    2d82:	bf 4f       	sbci	r27, 0xFF	; 255
    2d84:	fe 01       	movw	r30, r28
    2d86:	e9 5b       	subi	r30, 0xB9	; 185
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 81       	ld	r24, Z
    2d8c:	91 81       	ldd	r25, Z+1	; 0x01
    2d8e:	01 96       	adiw	r24, 0x01	; 1
    2d90:	11 96       	adiw	r26, 0x01	; 1
    2d92:	9c 93       	st	X, r25
    2d94:	8e 93       	st	-X, r24
    2d96:	fe 01       	movw	r30, r28
    2d98:	e9 5b       	subi	r30, 0xB9	; 185
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 81       	ld	r24, Z
    2d9e:	91 81       	ldd	r25, Z+1	; 0x01
    2da0:	84 30       	cpi	r24, 0x04	; 4
    2da2:	91 05       	cpc	r25, r1
    2da4:	74 f2       	brlt	.-100    	; 0x2d42 <Login+0x404>





        if (ID && Password)
    2da6:	fe 01       	movw	r30, r28
    2da8:	e3 5b       	subi	r30, 0xB3	; 179
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 81       	ld	r24, Z
    2dae:	88 23       	and	r24, r24
    2db0:	09 f4       	brne	.+2      	; 0x2db4 <Login+0x476>
    2db2:	81 c0       	rjmp	.+258    	; 0x2eb6 <Login+0x578>
    2db4:	fe 01       	movw	r30, r28
    2db6:	e4 5b       	subi	r30, 0xB4	; 180
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	80 81       	ld	r24, Z
    2dbc:	88 23       	and	r24, r24
    2dbe:	09 f4       	brne	.+2      	; 0x2dc2 <Login+0x484>
    2dc0:	7a c0       	rjmp	.+244    	; 0x2eb6 <Login+0x578>
        {


            CLCD_voidSendCmd(1);
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <CLCD_voidSendCmd>

            CLCD_u8SendString("Welcome Eslam");
    2dc8:	87 e8       	ldi	r24, 0x87	; 135
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	0e 94 a8 07 	call	0xf50	; 0xf50 <CLCD_u8SendString>
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	aa ef       	ldi	r26, 0xFA	; 250
    2dd6:	b4 e4       	ldi	r27, 0x44	; 68
    2dd8:	8d ab       	std	Y+53, r24	; 0x35
    2dda:	9e ab       	std	Y+54, r25	; 0x36
    2ddc:	af ab       	std	Y+55, r26	; 0x37
    2dde:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de0:	6d a9       	ldd	r22, Y+53	; 0x35
    2de2:	7e a9       	ldd	r23, Y+54	; 0x36
    2de4:	8f a9       	ldd	r24, Y+55	; 0x37
    2de6:	98 ad       	ldd	r25, Y+56	; 0x38
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	4a e7       	ldi	r20, 0x7A	; 122
    2dee:	55 e4       	ldi	r21, 0x45	; 69
    2df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	89 ab       	std	Y+49, r24	; 0x31
    2dfa:	9a ab       	std	Y+50, r25	; 0x32
    2dfc:	ab ab       	std	Y+51, r26	; 0x33
    2dfe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e00:	69 a9       	ldd	r22, Y+49	; 0x31
    2e02:	7a a9       	ldd	r23, Y+50	; 0x32
    2e04:	8b a9       	ldd	r24, Y+51	; 0x33
    2e06:	9c a9       	ldd	r25, Y+52	; 0x34
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e8       	ldi	r20, 0x80	; 128
    2e0e:	5f e3       	ldi	r21, 0x3F	; 63
    2e10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e14:	88 23       	and	r24, r24
    2e16:	2c f4       	brge	.+10     	; 0x2e22 <Login+0x4e4>
		__ticks = 1;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	98 ab       	std	Y+48, r25	; 0x30
    2e1e:	8f a7       	std	Y+47, r24	; 0x2f
    2e20:	3f c0       	rjmp	.+126    	; 0x2ea0 <Login+0x562>
	else if (__tmp > 65535)
    2e22:	69 a9       	ldd	r22, Y+49	; 0x31
    2e24:	7a a9       	ldd	r23, Y+50	; 0x32
    2e26:	8b a9       	ldd	r24, Y+51	; 0x33
    2e28:	9c a9       	ldd	r25, Y+52	; 0x34
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	3f ef       	ldi	r19, 0xFF	; 255
    2e2e:	4f e7       	ldi	r20, 0x7F	; 127
    2e30:	57 e4       	ldi	r21, 0x47	; 71
    2e32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e36:	18 16       	cp	r1, r24
    2e38:	4c f5       	brge	.+82     	; 0x2e8c <Login+0x54e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3a:	6d a9       	ldd	r22, Y+53	; 0x35
    2e3c:	7e a9       	ldd	r23, Y+54	; 0x36
    2e3e:	8f a9       	ldd	r24, Y+55	; 0x37
    2e40:	98 ad       	ldd	r25, Y+56	; 0x38
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	40 e2       	ldi	r20, 0x20	; 32
    2e48:	51 e4       	ldi	r21, 0x41	; 65
    2e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	bc 01       	movw	r22, r24
    2e54:	cd 01       	movw	r24, r26
    2e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	98 ab       	std	Y+48, r25	; 0x30
    2e60:	8f a7       	std	Y+47, r24	; 0x2f
    2e62:	0f c0       	rjmp	.+30     	; 0x2e82 <Login+0x544>
    2e64:	80 e9       	ldi	r24, 0x90	; 144
    2e66:	91 e0       	ldi	r25, 0x01	; 1
    2e68:	9e a7       	std	Y+46, r25	; 0x2e
    2e6a:	8d a7       	std	Y+45, r24	; 0x2d
    2e6c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e6e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	f1 f7       	brne	.-4      	; 0x2e70 <Login+0x532>
    2e74:	9e a7       	std	Y+46, r25	; 0x2e
    2e76:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e7a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	98 ab       	std	Y+48, r25	; 0x30
    2e80:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e82:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e84:	98 a9       	ldd	r25, Y+48	; 0x30
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	69 f7       	brne	.-38     	; 0x2e64 <Login+0x526>
    2e8a:	b1 c1       	rjmp	.+866    	; 0x31ee <Login+0x8b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e8e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e90:	8b a9       	ldd	r24, Y+51	; 0x33
    2e92:	9c a9       	ldd	r25, Y+52	; 0x34
    2e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	98 ab       	std	Y+48, r25	; 0x30
    2e9e:	8f a7       	std	Y+47, r24	; 0x2f
    2ea0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ea2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ea4:	9c a7       	std	Y+44, r25	; 0x2c
    2ea6:	8b a7       	std	Y+43, r24	; 0x2b
    2ea8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eaa:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <Login+0x56e>
    2eb0:	9c a7       	std	Y+44, r25	; 0x2c
    2eb2:	8b a7       	std	Y+43, r24	; 0x2b
    2eb4:	9c c1       	rjmp	.+824    	; 0x31ee <Login+0x8b0>

            break;

        }

        else if (ID==0 & Password ==1)
    2eb6:	a4 96       	adiw	r28, 0x24	; 36
    2eb8:	1f ae       	std	Y+63, r1	; 0x3f
    2eba:	a4 97       	sbiw	r28, 0x24	; 36
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e3 5b       	subi	r30, 0xB3	; 179
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	80 81       	ld	r24, Z
    2ec4:	88 23       	and	r24, r24
    2ec6:	21 f4       	brne	.+8      	; 0x2ed0 <Login+0x592>
    2ec8:	f1 e0       	ldi	r31, 0x01	; 1
    2eca:	a4 96       	adiw	r28, 0x24	; 36
    2ecc:	ff af       	std	Y+63, r31	; 0x3f
    2ece:	a4 97       	sbiw	r28, 0x24	; 36
    2ed0:	a3 96       	adiw	r28, 0x23	; 35
    2ed2:	1f ae       	std	Y+63, r1	; 0x3f
    2ed4:	a3 97       	sbiw	r28, 0x23	; 35
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	e4 5b       	subi	r30, 0xB4	; 180
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	80 81       	ld	r24, Z
    2ede:	81 30       	cpi	r24, 0x01	; 1
    2ee0:	21 f4       	brne	.+8      	; 0x2eea <Login+0x5ac>
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	a3 96       	adiw	r28, 0x23	; 35
    2ee6:	8f af       	std	Y+63, r24	; 0x3f
    2ee8:	a3 97       	sbiw	r28, 0x23	; 35
    2eea:	a4 96       	adiw	r28, 0x24	; 36
    2eec:	8f ad       	ldd	r24, Y+63	; 0x3f
    2eee:	a4 97       	sbiw	r28, 0x24	; 36
    2ef0:	a3 96       	adiw	r28, 0x23	; 35
    2ef2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ef4:	a3 97       	sbiw	r28, 0x23	; 35
    2ef6:	89 23       	and	r24, r25
    2ef8:	88 23       	and	r24, r24
    2efa:	89 f0       	breq	.+34     	; 0x2f1e <Login+0x5e0>
        {

            CLCD_voidSendCmd(1);
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <CLCD_voidSendCmd>

            CLCD_u8SendString("Invalid Id ");
    2f02:	85 e9       	ldi	r24, 0x95	; 149
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	0e 94 a8 07 	call	0xf50	; 0xf50 <CLCD_u8SendString>



            LoginI--;
    2f0a:	de 01       	movw	r26, r28
    2f0c:	a5 5b       	subi	r26, 0xB5	; 181
    2f0e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f10:	fe 01       	movw	r30, r28
    2f12:	e5 5b       	subi	r30, 0xB5	; 181
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	80 81       	ld	r24, Z
    2f18:	81 50       	subi	r24, 0x01	; 1
    2f1a:	8c 93       	st	X, r24
    2f1c:	6f c0       	rjmp	.+222    	; 0x2ffc <Login+0x6be>

        }


        else if (ID==1 & Password ==0)
    2f1e:	a2 96       	adiw	r28, 0x22	; 34
    2f20:	1f ae       	std	Y+63, r1	; 0x3f
    2f22:	a2 97       	sbiw	r28, 0x22	; 34
    2f24:	fe 01       	movw	r30, r28
    2f26:	e3 5b       	subi	r30, 0xB3	; 179
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	80 81       	ld	r24, Z
    2f2c:	81 30       	cpi	r24, 0x01	; 1
    2f2e:	21 f4       	brne	.+8      	; 0x2f38 <Login+0x5fa>
    2f30:	e1 e0       	ldi	r30, 0x01	; 1
    2f32:	a2 96       	adiw	r28, 0x22	; 34
    2f34:	ef af       	std	Y+63, r30	; 0x3f
    2f36:	a2 97       	sbiw	r28, 0x22	; 34
    2f38:	a1 96       	adiw	r28, 0x21	; 33
    2f3a:	1f ae       	std	Y+63, r1	; 0x3f
    2f3c:	a1 97       	sbiw	r28, 0x21	; 33
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e4 5b       	subi	r30, 0xB4	; 180
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	80 81       	ld	r24, Z
    2f46:	88 23       	and	r24, r24
    2f48:	21 f4       	brne	.+8      	; 0x2f52 <Login+0x614>
    2f4a:	f1 e0       	ldi	r31, 0x01	; 1
    2f4c:	a1 96       	adiw	r28, 0x21	; 33
    2f4e:	ff af       	std	Y+63, r31	; 0x3f
    2f50:	a1 97       	sbiw	r28, 0x21	; 33
    2f52:	a2 96       	adiw	r28, 0x22	; 34
    2f54:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f56:	a2 97       	sbiw	r28, 0x22	; 34
    2f58:	a1 96       	adiw	r28, 0x21	; 33
    2f5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f5c:	a1 97       	sbiw	r28, 0x21	; 33
    2f5e:	89 23       	and	r24, r25
    2f60:	88 23       	and	r24, r24
    2f62:	89 f0       	breq	.+34     	; 0x2f86 <Login+0x648>
        {

            CLCD_voidSendCmd(1);
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <CLCD_voidSendCmd>

            CLCD_u8SendString("Invalid Password");
    2f6a:	81 ea       	ldi	r24, 0xA1	; 161
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	0e 94 a8 07 	call	0xf50	; 0xf50 <CLCD_u8SendString>



            LoginI--;
    2f72:	de 01       	movw	r26, r28
    2f74:	a5 5b       	subi	r26, 0xB5	; 181
    2f76:	bf 4f       	sbci	r27, 0xFF	; 255
    2f78:	fe 01       	movw	r30, r28
    2f7a:	e5 5b       	subi	r30, 0xB5	; 181
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	80 81       	ld	r24, Z
    2f80:	81 50       	subi	r24, 0x01	; 1
    2f82:	8c 93       	st	X, r24
    2f84:	3b c0       	rjmp	.+118    	; 0x2ffc <Login+0x6be>

        }
        else if (ID==0 & Password ==0)
    2f86:	a0 96       	adiw	r28, 0x20	; 32
    2f88:	1f ae       	std	Y+63, r1	; 0x3f
    2f8a:	a0 97       	sbiw	r28, 0x20	; 32
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	e3 5b       	subi	r30, 0xB3	; 179
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	80 81       	ld	r24, Z
    2f94:	88 23       	and	r24, r24
    2f96:	21 f4       	brne	.+8      	; 0x2fa0 <Login+0x662>
    2f98:	e1 e0       	ldi	r30, 0x01	; 1
    2f9a:	a0 96       	adiw	r28, 0x20	; 32
    2f9c:	ef af       	std	Y+63, r30	; 0x3f
    2f9e:	a0 97       	sbiw	r28, 0x20	; 32
    2fa0:	6f 96       	adiw	r28, 0x1f	; 31
    2fa2:	1f ae       	std	Y+63, r1	; 0x3f
    2fa4:	6f 97       	sbiw	r28, 0x1f	; 31
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e4 5b       	subi	r30, 0xB4	; 180
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	80 81       	ld	r24, Z
    2fae:	88 23       	and	r24, r24
    2fb0:	21 f4       	brne	.+8      	; 0x2fba <Login+0x67c>
    2fb2:	f1 e0       	ldi	r31, 0x01	; 1
    2fb4:	6f 96       	adiw	r28, 0x1f	; 31
    2fb6:	ff af       	std	Y+63, r31	; 0x3f
    2fb8:	6f 97       	sbiw	r28, 0x1f	; 31
    2fba:	a0 96       	adiw	r28, 0x20	; 32
    2fbc:	8f ad       	ldd	r24, Y+63	; 0x3f
    2fbe:	a0 97       	sbiw	r28, 0x20	; 32
    2fc0:	6f 96       	adiw	r28, 0x1f	; 31
    2fc2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fc4:	6f 97       	sbiw	r28, 0x1f	; 31
    2fc6:	89 23       	and	r24, r25
    2fc8:	88 23       	and	r24, r24
    2fca:	c1 f0       	breq	.+48     	; 0x2ffc <Login+0x6be>
        {

            CLCD_voidSendCmd(1);
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <CLCD_voidSendCmd>

           CLCD_u8SendString("Invalid Id");
    2fd2:	82 eb       	ldi	r24, 0xB2	; 178
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	0e 94 a8 07 	call	0xf50	; 0xf50 <CLCD_u8SendString>

            CLCD_voidGoToXY(0,1);
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	61 e0       	ldi	r22, 0x01	; 1
    2fde:	0e 94 68 08 	call	0x10d0	; 0x10d0 <CLCD_voidGoToXY>

            CLCD_u8SendString("Invalid Password");
    2fe2:	81 ea       	ldi	r24, 0xA1	; 161
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	0e 94 a8 07 	call	0xf50	; 0xf50 <CLCD_u8SendString>



            LoginI--;
    2fea:	de 01       	movw	r26, r28
    2fec:	a5 5b       	subi	r26, 0xB5	; 181
    2fee:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e5 5b       	subi	r30, 0xB5	; 181
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	80 81       	ld	r24, Z
    2ff8:	81 50       	subi	r24, 0x01	; 1
    2ffa:	8c 93       	st	X, r24

        }


        if(LoginI)
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	e5 5b       	subi	r30, 0xB5	; 181
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	80 81       	ld	r24, Z
    3004:	88 23       	and	r24, r24
    3006:	09 f4       	brne	.+2      	; 0x300a <Login+0x6cc>
    3008:	eb c0       	rjmp	.+470    	; 0x31e0 <Login+0x8a2>
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	aa ef       	ldi	r26, 0xFA	; 250
    3010:	b4 e4       	ldi	r27, 0x44	; 68
    3012:	8f a3       	std	Y+39, r24	; 0x27
    3014:	98 a7       	std	Y+40, r25	; 0x28
    3016:	a9 a7       	std	Y+41, r26	; 0x29
    3018:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301a:	6f a1       	ldd	r22, Y+39	; 0x27
    301c:	78 a5       	ldd	r23, Y+40	; 0x28
    301e:	89 a5       	ldd	r24, Y+41	; 0x29
    3020:	9a a5       	ldd	r25, Y+42	; 0x2a
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	4a e7       	ldi	r20, 0x7A	; 122
    3028:	55 e4       	ldi	r21, 0x45	; 69
    302a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	8b a3       	std	Y+35, r24	; 0x23
    3034:	9c a3       	std	Y+36, r25	; 0x24
    3036:	ad a3       	std	Y+37, r26	; 0x25
    3038:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    303a:	6b a1       	ldd	r22, Y+35	; 0x23
    303c:	7c a1       	ldd	r23, Y+36	; 0x24
    303e:	8d a1       	ldd	r24, Y+37	; 0x25
    3040:	9e a1       	ldd	r25, Y+38	; 0x26
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e8       	ldi	r20, 0x80	; 128
    3048:	5f e3       	ldi	r21, 0x3F	; 63
    304a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    304e:	88 23       	and	r24, r24
    3050:	2c f4       	brge	.+10     	; 0x305c <Login+0x71e>
		__ticks = 1;
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	9a a3       	std	Y+34, r25	; 0x22
    3058:	89 a3       	std	Y+33, r24	; 0x21
    305a:	3f c0       	rjmp	.+126    	; 0x30da <Login+0x79c>
	else if (__tmp > 65535)
    305c:	6b a1       	ldd	r22, Y+35	; 0x23
    305e:	7c a1       	ldd	r23, Y+36	; 0x24
    3060:	8d a1       	ldd	r24, Y+37	; 0x25
    3062:	9e a1       	ldd	r25, Y+38	; 0x26
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	3f ef       	ldi	r19, 0xFF	; 255
    3068:	4f e7       	ldi	r20, 0x7F	; 127
    306a:	57 e4       	ldi	r21, 0x47	; 71
    306c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3070:	18 16       	cp	r1, r24
    3072:	4c f5       	brge	.+82     	; 0x30c6 <Login+0x788>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3074:	6f a1       	ldd	r22, Y+39	; 0x27
    3076:	78 a5       	ldd	r23, Y+40	; 0x28
    3078:	89 a5       	ldd	r24, Y+41	; 0x29
    307a:	9a a5       	ldd	r25, Y+42	; 0x2a
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e2       	ldi	r20, 0x20	; 32
    3082:	51 e4       	ldi	r21, 0x41	; 65
    3084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	bc 01       	movw	r22, r24
    308e:	cd 01       	movw	r24, r26
    3090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	9a a3       	std	Y+34, r25	; 0x22
    309a:	89 a3       	std	Y+33, r24	; 0x21
    309c:	0f c0       	rjmp	.+30     	; 0x30bc <Login+0x77e>
    309e:	80 e9       	ldi	r24, 0x90	; 144
    30a0:	91 e0       	ldi	r25, 0x01	; 1
    30a2:	98 a3       	std	Y+32, r25	; 0x20
    30a4:	8f 8f       	std	Y+31, r24	; 0x1f
    30a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30a8:	98 a1       	ldd	r25, Y+32	; 0x20
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	f1 f7       	brne	.-4      	; 0x30aa <Login+0x76c>
    30ae:	98 a3       	std	Y+32, r25	; 0x20
    30b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b2:	89 a1       	ldd	r24, Y+33	; 0x21
    30b4:	9a a1       	ldd	r25, Y+34	; 0x22
    30b6:	01 97       	sbiw	r24, 0x01	; 1
    30b8:	9a a3       	std	Y+34, r25	; 0x22
    30ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30bc:	89 a1       	ldd	r24, Y+33	; 0x21
    30be:	9a a1       	ldd	r25, Y+34	; 0x22
    30c0:	00 97       	sbiw	r24, 0x00	; 0
    30c2:	69 f7       	brne	.-38     	; 0x309e <Login+0x760>
    30c4:	14 c0       	rjmp	.+40     	; 0x30ee <Login+0x7b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c6:	6b a1       	ldd	r22, Y+35	; 0x23
    30c8:	7c a1       	ldd	r23, Y+36	; 0x24
    30ca:	8d a1       	ldd	r24, Y+37	; 0x25
    30cc:	9e a1       	ldd	r25, Y+38	; 0x26
    30ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	9a a3       	std	Y+34, r25	; 0x22
    30d8:	89 a3       	std	Y+33, r24	; 0x21
    30da:	89 a1       	ldd	r24, Y+33	; 0x21
    30dc:	9a a1       	ldd	r25, Y+34	; 0x22
    30de:	9e 8f       	std	Y+30, r25	; 0x1e
    30e0:	8d 8f       	std	Y+29, r24	; 0x1d
    30e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <Login+0x7a8>
    30ea:	9e 8f       	std	Y+30, r25	; 0x1e
    30ec:	8d 8f       	std	Y+29, r24	; 0x1d

        {
        			_delay_ms(2000);

                   CLCD_voidSendCmd(1);
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <CLCD_voidSendCmd>

                   CLCD_u8SendString("Try Again..");
    30f4:	8d eb       	ldi	r24, 0xBD	; 189
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	0e 94 a8 07 	call	0xf50	; 0xf50 <CLCD_u8SendString>
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	aa ef       	ldi	r26, 0xFA	; 250
    3102:	b4 e4       	ldi	r27, 0x44	; 68
    3104:	89 8f       	std	Y+25, r24	; 0x19
    3106:	9a 8f       	std	Y+26, r25	; 0x1a
    3108:	ab 8f       	std	Y+27, r26	; 0x1b
    310a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310c:	69 8d       	ldd	r22, Y+25	; 0x19
    310e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3110:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3112:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	4a e7       	ldi	r20, 0x7A	; 122
    311a:	55 e4       	ldi	r21, 0x45	; 69
    311c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	8d 8b       	std	Y+21, r24	; 0x15
    3126:	9e 8b       	std	Y+22, r25	; 0x16
    3128:	af 8b       	std	Y+23, r26	; 0x17
    312a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    312c:	6d 89       	ldd	r22, Y+21	; 0x15
    312e:	7e 89       	ldd	r23, Y+22	; 0x16
    3130:	8f 89       	ldd	r24, Y+23	; 0x17
    3132:	98 8d       	ldd	r25, Y+24	; 0x18
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e8       	ldi	r20, 0x80	; 128
    313a:	5f e3       	ldi	r21, 0x3F	; 63
    313c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3140:	88 23       	and	r24, r24
    3142:	2c f4       	brge	.+10     	; 0x314e <Login+0x810>
		__ticks = 1;
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	9c 8b       	std	Y+20, r25	; 0x14
    314a:	8b 8b       	std	Y+19, r24	; 0x13
    314c:	3f c0       	rjmp	.+126    	; 0x31cc <Login+0x88e>
	else if (__tmp > 65535)
    314e:	6d 89       	ldd	r22, Y+21	; 0x15
    3150:	7e 89       	ldd	r23, Y+22	; 0x16
    3152:	8f 89       	ldd	r24, Y+23	; 0x17
    3154:	98 8d       	ldd	r25, Y+24	; 0x18
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	3f ef       	ldi	r19, 0xFF	; 255
    315a:	4f e7       	ldi	r20, 0x7F	; 127
    315c:	57 e4       	ldi	r21, 0x47	; 71
    315e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3162:	18 16       	cp	r1, r24
    3164:	4c f5       	brge	.+82     	; 0x31b8 <Login+0x87a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3166:	69 8d       	ldd	r22, Y+25	; 0x19
    3168:	7a 8d       	ldd	r23, Y+26	; 0x1a
    316a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    316c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e2       	ldi	r20, 0x20	; 32
    3174:	51 e4       	ldi	r21, 0x41	; 65
    3176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	bc 01       	movw	r22, r24
    3180:	cd 01       	movw	r24, r26
    3182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	9c 8b       	std	Y+20, r25	; 0x14
    318c:	8b 8b       	std	Y+19, r24	; 0x13
    318e:	0f c0       	rjmp	.+30     	; 0x31ae <Login+0x870>
    3190:	80 e9       	ldi	r24, 0x90	; 144
    3192:	91 e0       	ldi	r25, 0x01	; 1
    3194:	9a 8b       	std	Y+18, r25	; 0x12
    3196:	89 8b       	std	Y+17, r24	; 0x11
    3198:	89 89       	ldd	r24, Y+17	; 0x11
    319a:	9a 89       	ldd	r25, Y+18	; 0x12
    319c:	01 97       	sbiw	r24, 0x01	; 1
    319e:	f1 f7       	brne	.-4      	; 0x319c <Login+0x85e>
    31a0:	9a 8b       	std	Y+18, r25	; 0x12
    31a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a4:	8b 89       	ldd	r24, Y+19	; 0x13
    31a6:	9c 89       	ldd	r25, Y+20	; 0x14
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	9c 8b       	std	Y+20, r25	; 0x14
    31ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ae:	8b 89       	ldd	r24, Y+19	; 0x13
    31b0:	9c 89       	ldd	r25, Y+20	; 0x14
    31b2:	00 97       	sbiw	r24, 0x00	; 0
    31b4:	69 f7       	brne	.-38     	; 0x3190 <Login+0x852>
    31b6:	14 c0       	rjmp	.+40     	; 0x31e0 <Login+0x8a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b8:	6d 89       	ldd	r22, Y+21	; 0x15
    31ba:	7e 89       	ldd	r23, Y+22	; 0x16
    31bc:	8f 89       	ldd	r24, Y+23	; 0x17
    31be:	98 8d       	ldd	r25, Y+24	; 0x18
    31c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	9c 8b       	std	Y+20, r25	; 0x14
    31ca:	8b 8b       	std	Y+19, r24	; 0x13
    31cc:	8b 89       	ldd	r24, Y+19	; 0x13
    31ce:	9c 89       	ldd	r25, Y+20	; 0x14
    31d0:	98 8b       	std	Y+16, r25	; 0x10
    31d2:	8f 87       	std	Y+15, r24	; 0x0f
    31d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    31d6:	98 89       	ldd	r25, Y+16	; 0x10
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	f1 f7       	brne	.-4      	; 0x31d8 <Login+0x89a>
    31dc:	98 8b       	std	Y+16, r25	; 0x10
    31de:	8f 87       	std	Y+15, r24	; 0x0f

    CLCD_u8SendString("Welcome...");

    _delay_ms(2000);

    while (LoginI)
    31e0:	fe 01       	movw	r30, r28
    31e2:	e5 5b       	subi	r30, 0xB5	; 181
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	80 81       	ld	r24, Z
    31e8:	88 23       	and	r24, r24
    31ea:	09 f0       	breq	.+2      	; 0x31ee <Login+0x8b0>
    31ec:	a4 cc       	rjmp	.-1720   	; 0x2b36 <Login+0x1f8>


    }


    if (ID && Password)
    31ee:	fe 01       	movw	r30, r28
    31f0:	e3 5b       	subi	r30, 0xB3	; 179
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 81       	ld	r24, Z
    31f6:	88 23       	and	r24, r24
    31f8:	39 f0       	breq	.+14     	; 0x3208 <Login+0x8ca>
    31fa:	fe 01       	movw	r30, r28
    31fc:	e4 5b       	subi	r30, 0xB4	; 180
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	80 81       	ld	r24, Z
    3202:	88 23       	and	r24, r24
    3204:	09 f0       	breq	.+2      	; 0x3208 <Login+0x8ca>
    3206:	7a c0       	rjmp	.+244    	; 0x32fc <Login+0x9be>





}
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	aa ef       	ldi	r26, 0xFA	; 250
    320e:	b4 e4       	ldi	r27, 0x44	; 68
    3210:	8b 87       	std	Y+11, r24	; 0x0b
    3212:	9c 87       	std	Y+12, r25	; 0x0c
    3214:	ad 87       	std	Y+13, r26	; 0x0d
    3216:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3218:	6b 85       	ldd	r22, Y+11	; 0x0b
    321a:	7c 85       	ldd	r23, Y+12	; 0x0c
    321c:	8d 85       	ldd	r24, Y+13	; 0x0d
    321e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	4a e7       	ldi	r20, 0x7A	; 122
    3226:	55 e4       	ldi	r21, 0x45	; 69
    3228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	8f 83       	std	Y+7, r24	; 0x07
    3232:	98 87       	std	Y+8, r25	; 0x08
    3234:	a9 87       	std	Y+9, r26	; 0x09
    3236:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3238:	6f 81       	ldd	r22, Y+7	; 0x07
    323a:	78 85       	ldd	r23, Y+8	; 0x08
    323c:	89 85       	ldd	r24, Y+9	; 0x09
    323e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e8       	ldi	r20, 0x80	; 128
    3246:	5f e3       	ldi	r21, 0x3F	; 63
    3248:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    324c:	88 23       	and	r24, r24
    324e:	2c f4       	brge	.+10     	; 0x325a <Login+0x91c>
		__ticks = 1;
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	3f c0       	rjmp	.+126    	; 0x32d8 <Login+0x99a>
	else if (__tmp > 65535)
    325a:	6f 81       	ldd	r22, Y+7	; 0x07
    325c:	78 85       	ldd	r23, Y+8	; 0x08
    325e:	89 85       	ldd	r24, Y+9	; 0x09
    3260:	9a 85       	ldd	r25, Y+10	; 0x0a
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	3f ef       	ldi	r19, 0xFF	; 255
    3266:	4f e7       	ldi	r20, 0x7F	; 127
    3268:	57 e4       	ldi	r21, 0x47	; 71
    326a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    326e:	18 16       	cp	r1, r24
    3270:	4c f5       	brge	.+82     	; 0x32c4 <Login+0x986>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3272:	6b 85       	ldd	r22, Y+11	; 0x0b
    3274:	7c 85       	ldd	r23, Y+12	; 0x0c
    3276:	8d 85       	ldd	r24, Y+13	; 0x0d
    3278:	9e 85       	ldd	r25, Y+14	; 0x0e
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e2       	ldi	r20, 0x20	; 32
    3280:	51 e4       	ldi	r21, 0x41	; 65
    3282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	bc 01       	movw	r22, r24
    328c:	cd 01       	movw	r24, r26
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9e 83       	std	Y+6, r25	; 0x06
    3298:	8d 83       	std	Y+5, r24	; 0x05
    329a:	0f c0       	rjmp	.+30     	; 0x32ba <Login+0x97c>
    329c:	80 e9       	ldi	r24, 0x90	; 144
    329e:	91 e0       	ldi	r25, 0x01	; 1
    32a0:	9c 83       	std	Y+4, r25	; 0x04
    32a2:	8b 83       	std	Y+3, r24	; 0x03
    32a4:	8b 81       	ldd	r24, Y+3	; 0x03
    32a6:	9c 81       	ldd	r25, Y+4	; 0x04
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <Login+0x96a>
    32ac:	9c 83       	std	Y+4, r25	; 0x04
    32ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b0:	8d 81       	ldd	r24, Y+5	; 0x05
    32b2:	9e 81       	ldd	r25, Y+6	; 0x06
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	9e 83       	std	Y+6, r25	; 0x06
    32b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ba:	8d 81       	ldd	r24, Y+5	; 0x05
    32bc:	9e 81       	ldd	r25, Y+6	; 0x06
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	69 f7       	brne	.-38     	; 0x329c <Login+0x95e>
    32c2:	14 c0       	rjmp	.+40     	; 0x32ec <Login+0x9ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c4:	6f 81       	ldd	r22, Y+7	; 0x07
    32c6:	78 85       	ldd	r23, Y+8	; 0x08
    32c8:	89 85       	ldd	r24, Y+9	; 0x09
    32ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    32cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	9e 83       	std	Y+6, r25	; 0x06
    32d6:	8d 83       	std	Y+5, r24	; 0x05
    32d8:	8d 81       	ldd	r24, Y+5	; 0x05
    32da:	9e 81       	ldd	r25, Y+6	; 0x06
    32dc:	9a 83       	std	Y+2, r25	; 0x02
    32de:	89 83       	std	Y+1, r24	; 0x01
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	9a 81       	ldd	r25, Y+2	; 0x02
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <Login+0x9a6>
    32e8:	9a 83       	std	Y+2, r25	; 0x02
    32ea:	89 83       	std	Y+1, r24	; 0x01

    else
    {
    	_delay_ms(2000);

        CLCD_voidSendCmd(1);
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <CLCD_voidSendCmd>

        CLCD_u8SendString("Invalid Login ");
    32f2:	89 ec       	ldi	r24, 0xC9	; 201
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	0e 94 a8 07 	call	0xf50	; 0xf50 <CLCD_u8SendString>
    32fa:	ff cf       	rjmp	.-2      	; 0x32fa <Login+0x9bc>





}
    32fc:	cd 59       	subi	r28, 0x9D	; 157
    32fe:	df 4f       	sbci	r29, 0xFF	; 255
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	cd bf       	out	0x3d, r28	; 61
    330a:	cf 91       	pop	r28
    330c:	df 91       	pop	r29
    330e:	1f 91       	pop	r17
    3310:	0f 91       	pop	r16
    3312:	08 95       	ret

00003314 <__mulsi3>:
    3314:	62 9f       	mul	r22, r18
    3316:	d0 01       	movw	r26, r0
    3318:	73 9f       	mul	r23, r19
    331a:	f0 01       	movw	r30, r0
    331c:	82 9f       	mul	r24, r18
    331e:	e0 0d       	add	r30, r0
    3320:	f1 1d       	adc	r31, r1
    3322:	64 9f       	mul	r22, r20
    3324:	e0 0d       	add	r30, r0
    3326:	f1 1d       	adc	r31, r1
    3328:	92 9f       	mul	r25, r18
    332a:	f0 0d       	add	r31, r0
    332c:	83 9f       	mul	r24, r19
    332e:	f0 0d       	add	r31, r0
    3330:	74 9f       	mul	r23, r20
    3332:	f0 0d       	add	r31, r0
    3334:	65 9f       	mul	r22, r21
    3336:	f0 0d       	add	r31, r0
    3338:	99 27       	eor	r25, r25
    333a:	72 9f       	mul	r23, r18
    333c:	b0 0d       	add	r27, r0
    333e:	e1 1d       	adc	r30, r1
    3340:	f9 1f       	adc	r31, r25
    3342:	63 9f       	mul	r22, r19
    3344:	b0 0d       	add	r27, r0
    3346:	e1 1d       	adc	r30, r1
    3348:	f9 1f       	adc	r31, r25
    334a:	bd 01       	movw	r22, r26
    334c:	cf 01       	movw	r24, r30
    334e:	11 24       	eor	r1, r1
    3350:	08 95       	ret

00003352 <__udivmodqi4>:
    3352:	99 1b       	sub	r25, r25
    3354:	79 e0       	ldi	r23, 0x09	; 9
    3356:	04 c0       	rjmp	.+8      	; 0x3360 <__udivmodqi4_ep>

00003358 <__udivmodqi4_loop>:
    3358:	99 1f       	adc	r25, r25
    335a:	96 17       	cp	r25, r22
    335c:	08 f0       	brcs	.+2      	; 0x3360 <__udivmodqi4_ep>
    335e:	96 1b       	sub	r25, r22

00003360 <__udivmodqi4_ep>:
    3360:	88 1f       	adc	r24, r24
    3362:	7a 95       	dec	r23
    3364:	c9 f7       	brne	.-14     	; 0x3358 <__udivmodqi4_loop>
    3366:	80 95       	com	r24
    3368:	08 95       	ret

0000336a <__divmodsi4>:
    336a:	97 fb       	bst	r25, 7
    336c:	09 2e       	mov	r0, r25
    336e:	05 26       	eor	r0, r21
    3370:	0e d0       	rcall	.+28     	; 0x338e <__divmodsi4_neg1>
    3372:	57 fd       	sbrc	r21, 7
    3374:	04 d0       	rcall	.+8      	; 0x337e <__divmodsi4_neg2>
    3376:	14 d0       	rcall	.+40     	; 0x33a0 <__udivmodsi4>
    3378:	0a d0       	rcall	.+20     	; 0x338e <__divmodsi4_neg1>
    337a:	00 1c       	adc	r0, r0
    337c:	38 f4       	brcc	.+14     	; 0x338c <__divmodsi4_exit>

0000337e <__divmodsi4_neg2>:
    337e:	50 95       	com	r21
    3380:	40 95       	com	r20
    3382:	30 95       	com	r19
    3384:	21 95       	neg	r18
    3386:	3f 4f       	sbci	r19, 0xFF	; 255
    3388:	4f 4f       	sbci	r20, 0xFF	; 255
    338a:	5f 4f       	sbci	r21, 0xFF	; 255

0000338c <__divmodsi4_exit>:
    338c:	08 95       	ret

0000338e <__divmodsi4_neg1>:
    338e:	f6 f7       	brtc	.-4      	; 0x338c <__divmodsi4_exit>
    3390:	90 95       	com	r25
    3392:	80 95       	com	r24
    3394:	70 95       	com	r23
    3396:	61 95       	neg	r22
    3398:	7f 4f       	sbci	r23, 0xFF	; 255
    339a:	8f 4f       	sbci	r24, 0xFF	; 255
    339c:	9f 4f       	sbci	r25, 0xFF	; 255
    339e:	08 95       	ret

000033a0 <__udivmodsi4>:
    33a0:	a1 e2       	ldi	r26, 0x21	; 33
    33a2:	1a 2e       	mov	r1, r26
    33a4:	aa 1b       	sub	r26, r26
    33a6:	bb 1b       	sub	r27, r27
    33a8:	fd 01       	movw	r30, r26
    33aa:	0d c0       	rjmp	.+26     	; 0x33c6 <__udivmodsi4_ep>

000033ac <__udivmodsi4_loop>:
    33ac:	aa 1f       	adc	r26, r26
    33ae:	bb 1f       	adc	r27, r27
    33b0:	ee 1f       	adc	r30, r30
    33b2:	ff 1f       	adc	r31, r31
    33b4:	a2 17       	cp	r26, r18
    33b6:	b3 07       	cpc	r27, r19
    33b8:	e4 07       	cpc	r30, r20
    33ba:	f5 07       	cpc	r31, r21
    33bc:	20 f0       	brcs	.+8      	; 0x33c6 <__udivmodsi4_ep>
    33be:	a2 1b       	sub	r26, r18
    33c0:	b3 0b       	sbc	r27, r19
    33c2:	e4 0b       	sbc	r30, r20
    33c4:	f5 0b       	sbc	r31, r21

000033c6 <__udivmodsi4_ep>:
    33c6:	66 1f       	adc	r22, r22
    33c8:	77 1f       	adc	r23, r23
    33ca:	88 1f       	adc	r24, r24
    33cc:	99 1f       	adc	r25, r25
    33ce:	1a 94       	dec	r1
    33d0:	69 f7       	brne	.-38     	; 0x33ac <__udivmodsi4_loop>
    33d2:	60 95       	com	r22
    33d4:	70 95       	com	r23
    33d6:	80 95       	com	r24
    33d8:	90 95       	com	r25
    33da:	9b 01       	movw	r18, r22
    33dc:	ac 01       	movw	r20, r24
    33de:	bd 01       	movw	r22, r26
    33e0:	cf 01       	movw	r24, r30
    33e2:	08 95       	ret

000033e4 <__prologue_saves__>:
    33e4:	2f 92       	push	r2
    33e6:	3f 92       	push	r3
    33e8:	4f 92       	push	r4
    33ea:	5f 92       	push	r5
    33ec:	6f 92       	push	r6
    33ee:	7f 92       	push	r7
    33f0:	8f 92       	push	r8
    33f2:	9f 92       	push	r9
    33f4:	af 92       	push	r10
    33f6:	bf 92       	push	r11
    33f8:	cf 92       	push	r12
    33fa:	df 92       	push	r13
    33fc:	ef 92       	push	r14
    33fe:	ff 92       	push	r15
    3400:	0f 93       	push	r16
    3402:	1f 93       	push	r17
    3404:	cf 93       	push	r28
    3406:	df 93       	push	r29
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
    340c:	ca 1b       	sub	r28, r26
    340e:	db 0b       	sbc	r29, r27
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	f8 94       	cli
    3414:	de bf       	out	0x3e, r29	; 62
    3416:	0f be       	out	0x3f, r0	; 63
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	09 94       	ijmp

0000341c <__epilogue_restores__>:
    341c:	2a 88       	ldd	r2, Y+18	; 0x12
    341e:	39 88       	ldd	r3, Y+17	; 0x11
    3420:	48 88       	ldd	r4, Y+16	; 0x10
    3422:	5f 84       	ldd	r5, Y+15	; 0x0f
    3424:	6e 84       	ldd	r6, Y+14	; 0x0e
    3426:	7d 84       	ldd	r7, Y+13	; 0x0d
    3428:	8c 84       	ldd	r8, Y+12	; 0x0c
    342a:	9b 84       	ldd	r9, Y+11	; 0x0b
    342c:	aa 84       	ldd	r10, Y+10	; 0x0a
    342e:	b9 84       	ldd	r11, Y+9	; 0x09
    3430:	c8 84       	ldd	r12, Y+8	; 0x08
    3432:	df 80       	ldd	r13, Y+7	; 0x07
    3434:	ee 80       	ldd	r14, Y+6	; 0x06
    3436:	fd 80       	ldd	r15, Y+5	; 0x05
    3438:	0c 81       	ldd	r16, Y+4	; 0x04
    343a:	1b 81       	ldd	r17, Y+3	; 0x03
    343c:	aa 81       	ldd	r26, Y+2	; 0x02
    343e:	b9 81       	ldd	r27, Y+1	; 0x01
    3440:	ce 0f       	add	r28, r30
    3442:	d1 1d       	adc	r29, r1
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	de bf       	out	0x3e, r29	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	ed 01       	movw	r28, r26
    3450:	08 95       	ret

00003452 <_exit>:
    3452:	f8 94       	cli

00003454 <__stop_program>:
    3454:	ff cf       	rjmp	.-2      	; 0x3454 <__stop_program>
